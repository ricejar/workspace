
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cac  08002cac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08002d24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000012c  08002d24  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa2f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185d  00000000  00000000  0002aacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003758  00000000  00000000  0002c32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  0002fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e8  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bed6  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fbc  00000000  00000000  0005c576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a0d4  00000000  00000000  00065532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016f606  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017d4  00000000  00000000  0016f65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  00170e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00170e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002ba8 	.word	0x08002ba8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002ba8 	.word	0x08002ba8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005d8:	b500      	push	{lr}
 80005da:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005ee:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f0:	2219      	movs	r2, #25
 80005f2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005f4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80005f8:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005fc:	2309      	movs	r3, #9
 80005fe:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000604:	4668      	mov	r0, sp
 8000606:	f000 fb59 	bl	8000cbc <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800060a:	b100      	cbz	r0, 800060e <SystemClock_Config+0x36>
    while(1) { ; }
 800060c:	e7fe      	b.n	800060c <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800060e:	f000 fb17 	bl	8000c40 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000612:	b100      	cbz	r0, 8000616 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000614:	e7fe      	b.n	8000614 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000616:	230f      	movs	r3, #15
 8000618:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800062e:	2107      	movs	r1, #7
 8000630:	a80d      	add	r0, sp, #52	; 0x34
 8000632:	f000 fdb5 	bl	80011a0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000636:	b100      	cbz	r0, 800063a <SystemClock_Config+0x62>
    while(1) { ; }
 8000638:	e7fe      	b.n	8000638 <SystemClock_Config+0x60>
  }
}
 800063a:	b013      	add	sp, #76	; 0x4c
 800063c:	f85d fb04 	ldr.w	pc, [sp], #4

08000640 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000640:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <CPU_CACHE_Enable+0x7c>)
 800064c:	2100      	movs	r1, #0
 800064e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000656:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800065a:	695a      	ldr	r2, [r3, #20]
 800065c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000660:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800066a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800066e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000672:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000676:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800067a:	e000      	b.n	800067e <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800067c:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800067e:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000682:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000686:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800068a:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800068e:	4c0b      	ldr	r4, [pc, #44]	; (80006bc <CPU_CACHE_Enable+0x7c>)
 8000690:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 8000694:	460b      	mov	r3, r1
 8000696:	3901      	subs	r1, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f2      	bne.n	8000682 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 800069c:	1e53      	subs	r3, r2, #1
 800069e:	2a00      	cmp	r2, #0
 80006a0:	d1ec      	bne.n	800067c <CPU_CACHE_Enable+0x3c>
 80006a2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006a6:	6963      	ldr	r3, [r4, #20]
 80006a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ac:	6163      	str	r3, [r4, #20]
 80006ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80006b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80006c0:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80006c2:	f7ff ffbd 	bl	8000640 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80006c6:	f000 f949 	bl	800095c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80006ca:	f7ff ff85 	bl	80005d8 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80006ce:	4a03      	ldr	r2, [pc, #12]	; (80006dc <Sys_Init+0x1c>)
 80006d0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <Sys_Init+0x20>)
 80006d6:	f000 f8bb 	bl	8000850 <initUart>
}
 80006da:	bd08      	pop	{r3, pc}
 80006dc:	40011000 	.word	0x40011000
 80006e0:	20000098 	.word	0x20000098

080006e4 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 80006e4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80006e6:	f000 f94f 	bl	8000988 <HAL_IncTick>
}
 80006ea:	bd08      	pop	{r3, pc}

080006ec <main>:
#include<stdint.h>




int main(void){
 80006ec:	b508      	push	{r3, lr}

	Sys_Init();
 80006ee:	f7ff ffe7 	bl	80006c0 <Sys_Init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <main+0x74>)
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	f042 0208 	orr.w	r2, r2, #8
 80006fa:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80006fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fe:	f042 0204 	orr.w	r2, r2, #4
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
	GPIOD -> MODER |= 0x00000100U;
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <main+0x78>)
 8000706:	6813      	ldr	r3, [r2, #0]
 8000708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070c:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER &= 0xFFFF3FFFU;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <main+0x7c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000716:	601a      	str	r2, [r3, #0]
	GPIOC -> PUPDR |= 0X00004000U;
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800071e:	60da      	str	r2, [r3, #12]

	printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <main+0x80>)
 8000722:	f001 fcab 	bl	800207c <iprintf>
	    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <main+0x84>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	f001 fac4 	bl	8001cb8 <fflush>
	    printf("press ESC to quit.\r\n\n");
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <main+0x88>)
 8000732:	f001 fd29 	bl	8002188 <puts>
 8000736:	e003      	b.n	8000740 <main+0x54>

	while(1){
		printf("Pin state %d\r\n",GPIOC -> IDR & 0x00000080 );
		if (GPIOC -> IDR & 0x00000080)
			GPIOD ->BSRR = 0x00100000U;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <main+0x78>)
 800073a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800073e:	619a      	str	r2, [r3, #24]
		printf("Pin state %d\r\n",GPIOC -> IDR & 0x00000080 );
 8000740:	4c09      	ldr	r4, [pc, #36]	; (8000768 <main+0x7c>)
 8000742:	6921      	ldr	r1, [r4, #16]
 8000744:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <main+0x8c>)
 800074a:	f001 fc97 	bl	800207c <iprintf>
		if (GPIOC -> IDR & 0x00000080)
 800074e:	6923      	ldr	r3, [r4, #16]
 8000750:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000754:	d1f0      	bne.n	8000738 <main+0x4c>
		else
			GPIOD ->BSRR = 0x00000010U;
 8000756:	4b03      	ldr	r3, [pc, #12]	; (8000764 <main+0x78>)
 8000758:	2210      	movs	r2, #16
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	e7f0      	b.n	8000740 <main+0x54>
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40020800 	.word	0x40020800
 800076c:	08002bd8 	.word	0x08002bd8
 8000770:	2000000c 	.word	0x2000000c
 8000774:	08002be4 	.word	0x08002be4
 8000778:	08002bfc 	.word	0x08002bfc

0800077c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	4a2e      	ldr	r2, [pc, #184]	; (800083c <HAL_UART_MspInit+0xc0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d004      	beq.n	8000792 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000788:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <HAL_UART_MspInit+0xc4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d02c      	beq.n	80007e8 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800078e:	b00b      	add	sp, #44	; 0x2c
 8000790:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000792:	4c2c      	ldr	r4, [pc, #176]	; (8000844 <HAL_UART_MspInit+0xc8>)
 8000794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6323      	str	r3, [r4, #48]	; 0x30
 800079c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007aa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b8:	2307      	movs	r3, #7
 80007ba:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80007bc:	4d22      	ldr	r5, [pc, #136]	; (8000848 <HAL_UART_MspInit+0xcc>)
 80007be:	a905      	add	r1, sp, #20
 80007c0:	4628      	mov	r0, r5
 80007c2:	f000 f94d 	bl	8000a60 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80007cc:	a905      	add	r1, sp, #20
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 f946 	bl	8000a60 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80007d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6463      	str	r3, [r4, #68]	; 0x44
 80007dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	9b02      	ldr	r3, [sp, #8]
 80007e6:	e7d2      	b.n	800078e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80007e8:	4c16      	ldr	r4, [pc, #88]	; (8000844 <HAL_UART_MspInit+0xc8>)
 80007ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6323      	str	r3, [r4, #48]	; 0x30
 80007f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	9303      	str	r3, [sp, #12]
 80007fa:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800080c:	2308      	movs	r3, #8
 800080e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000810:	4d0e      	ldr	r5, [pc, #56]	; (800084c <HAL_UART_MspInit+0xd0>)
 8000812:	a905      	add	r1, sp, #20
 8000814:	4628      	mov	r0, r5
 8000816:	f000 f923 	bl	8000a60 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800081e:	a905      	add	r1, sp, #20
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f91d 	bl	8000a60 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	6463      	str	r3, [r4, #68]	; 0x44
 800082e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	9304      	str	r3, [sp, #16]
 8000836:	9b04      	ldr	r3, [sp, #16]
}
 8000838:	e7a9      	b.n	800078e <HAL_UART_MspInit+0x12>
 800083a:	bf00      	nop
 800083c:	40011000 	.word	0x40011000
 8000840:	40011400 	.word	0x40011400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000850:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000852:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000854:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	2200      	movs	r2, #0
 8000858:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800085a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800085c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800085e:	210c      	movs	r1, #12
 8000860:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000862:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000864:	f001 f934 	bl	8001ad0 <HAL_UART_Init>
}
 8000868:	bd08      	pop	{r3, pc}
	...

0800086c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800086c:	b510      	push	{r4, lr}
 800086e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	b292      	uxth	r2, r2
 8000876:	4802      	ldr	r0, [pc, #8]	; (8000880 <_write+0x14>)
 8000878:	f000 fff4 	bl	8001864 <HAL_UART_Transmit>
	return len;
}
 800087c:	4620      	mov	r0, r4
 800087e:	bd10      	pop	{r4, pc}
 8000880:	20000098 	.word	0x20000098

08000884 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000884:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000886:	2200      	movs	r2, #0
 8000888:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2201      	movs	r2, #1
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_read+0x18>)
 8000892:	f001 f854 	bl	800193e <HAL_UART_Receive>
	return len;
}
 8000896:	2001      	movs	r0, #1
 8000898:	bd08      	pop	{r3, pc}
 800089a:	bf00      	nop
 800089c:	20000098 	.word	0x20000098

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ca:	f000 f813 	bl	80008f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008ce:	f001 fafb 	bl	8001ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff ff0b 	bl	80006ec <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008e4:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 80008e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008ec:	2000012c 	.word	0x2000012c

080008f0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SystemInit+0x18>)
 80008f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000910:	4770      	bx	lr
	...

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b510      	push	{r4, lr}
 8000916:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_InitTick+0x40>)
 800091a:	7818      	ldrb	r0, [r3, #0]
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	fbb3 f3f0 	udiv	r3, r3, r0
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <HAL_InitTick+0x44>)
 8000926:	6810      	ldr	r0, [r2, #0]
 8000928:	fbb0 f0f3 	udiv	r0, r0, r3
 800092c:	f000 f882 	bl	8000a34 <HAL_SYSTICK_Config>
 8000930:	b968      	cbnz	r0, 800094e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	2c0f      	cmp	r4, #15
 8000934:	d901      	bls.n	800093a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000936:	2001      	movs	r0, #1
 8000938:	e00a      	b.n	8000950 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	2200      	movs	r2, #0
 800093c:	4621      	mov	r1, r4
 800093e:	f04f 30ff 	mov.w	r0, #4294967295
 8000942:	f000 f845 	bl	80009d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_InitTick+0x40>)
 8000948:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2000      	movs	r0, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
}
 8000950:	bd10      	pop	{r4, pc}
 8000952:	bf00      	nop
 8000954:	20000004 	.word	0x20000004
 8000958:	20000000 	.word	0x20000000

0800095c <HAL_Init>:
{
 800095c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_Init+0x28>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000966:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800096e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f81b 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	200f      	movs	r0, #15
 8000978:	f7ff ffcc 	bl	8000914 <HAL_InitTick>
  HAL_MspInit();
 800097c:	f7ff ffc8 	bl	8000910 <HAL_MspInit>
}
 8000980:	2000      	movs	r0, #0
 8000982:	bd08      	pop	{r3, pc}
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x10>)
 800098a:	6811      	ldr	r1, [r2, #0]
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_IncTick+0x14>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	440b      	add	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000118 	.word	0x20000118
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <HAL_GetTick+0x8>)
 80009a2:	6818      	ldr	r0, [r3, #0]
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000118 	.word	0x20000118

080009ac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009ae:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	0200      	lsls	r0, r0, #8
 80009ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009be:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009c0:	4a02      	ldr	r2, [pc, #8]	; (80009cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009c2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009c4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	05fa0000 	.word	0x05fa0000

080009d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_NVIC_SetPriority+0x58>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009da:	f1c3 0407 	rsb	r4, r3, #7
 80009de:	2c04      	cmp	r4, #4
 80009e0:	bf28      	it	cs
 80009e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e4:	1d1d      	adds	r5, r3, #4
 80009e6:	2d06      	cmp	r5, #6
 80009e8:	d914      	bls.n	8000a14 <HAL_NVIC_SetPriority+0x44>
 80009ea:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 35ff 	mov.w	r5, #4294967295
 80009f0:	fa05 f404 	lsl.w	r4, r5, r4
 80009f4:	ea21 0104 	bic.w	r1, r1, r4
 80009f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fa:	fa05 f303 	lsl.w	r3, r5, r3
 80009fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a02:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a04:	2800      	cmp	r0, #0
 8000a06:	db07      	blt.n	8000a18 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	0109      	lsls	r1, r1, #4
 8000a0a:	b2c9      	uxtb	r1, r1
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_NVIC_SetPriority+0x5c>)
 8000a0e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a10:	bc30      	pop	{r4, r5}
 8000a12:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a14:	2300      	movs	r3, #0
 8000a16:	e7e9      	b.n	80009ec <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	f000 000f 	and.w	r0, r0, #15
 8000a1c:	0109      	lsls	r1, r1, #4
 8000a1e:	b2c9      	uxtb	r1, r1
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_NVIC_SetPriority+0x60>)
 8000a22:	5419      	strb	r1, [r3, r0]
 8000a24:	e7f4      	b.n	8000a10 <HAL_NVIC_SetPriority+0x40>
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	e000e400 	.word	0xe000e400
 8000a30:	e000ed14 	.word	0xe000ed14

08000a34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	3801      	subs	r0, #1
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d20a      	bcs.n	8000a52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_SYSTICK_Config+0x24>)
 8000a3e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_SYSTICK_Config+0x28>)
 8000a42:	21f0      	movs	r1, #240	; 0xf0
 8000a44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	2000      	movs	r0, #0
 8000a4a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	f200 80e3 	bhi.w	8000c2e <HAL_GPIO_Init+0x1ce>
{
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	e039      	b.n	8000ae2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a6e:	2209      	movs	r2, #9
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000a72:	2200      	movs	r2, #0
 8000a74:	40b2      	lsls	r2, r6
 8000a76:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a78:	3402      	adds	r4, #2
 8000a7a:	4e6d      	ldr	r6, [pc, #436]	; (8000c30 <HAL_GPIO_Init+0x1d0>)
 8000a7c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a80:	4a6c      	ldr	r2, [pc, #432]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000a82:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	43ea      	mvns	r2, r5
 8000a86:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8a:	684f      	ldr	r7, [r1, #4]
 8000a8c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a90:	d001      	beq.n	8000a96 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000a92:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000a96:	4c67      	ldr	r4, [pc, #412]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000a98:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000a9a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa0:	684f      	ldr	r7, [r1, #4]
 8000aa2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000aa6:	d001      	beq.n	8000aac <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000aa8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000aac:	4c61      	ldr	r4, [pc, #388]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000aae:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab6:	684f      	ldr	r7, [r1, #4]
 8000ab8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000abc:	d001      	beq.n	8000ac2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000abe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000ac2:	4c5c      	ldr	r4, [pc, #368]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000ac4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000ac6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ac8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aca:	684e      	ldr	r6, [r1, #4]
 8000acc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ad0:	d001      	beq.n	8000ad6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ad2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000ad6:	4c57      	ldr	r4, [pc, #348]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000ad8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ada:	3301      	adds	r3, #1
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	f200 80a4 	bhi.w	8000c2a <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	680c      	ldr	r4, [r1, #0]
 8000ae8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000aec:	ea32 0404 	bics.w	r4, r2, r4
 8000af0:	d1f3      	bne.n	8000ada <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af2:	684c      	ldr	r4, [r1, #4]
 8000af4:	1e66      	subs	r6, r4, #1
 8000af6:	2c11      	cmp	r4, #17
 8000af8:	bf18      	it	ne
 8000afa:	2e01      	cmpne	r6, #1
 8000afc:	d901      	bls.n	8000b02 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afe:	2c12      	cmp	r4, #18
 8000b00:	d112      	bne.n	8000b28 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000b02:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b04:	005f      	lsls	r7, r3, #1
 8000b06:	2403      	movs	r4, #3
 8000b08:	40bc      	lsls	r4, r7
 8000b0a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b0e:	68cc      	ldr	r4, [r1, #12]
 8000b10:	40bc      	lsls	r4, r7
 8000b12:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000b14:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b16:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b1c:	684c      	ldr	r4, [r1, #4]
 8000b1e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b22:	409a      	lsls	r2, r3
 8000b24:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b26:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b28:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b2a:	005e      	lsls	r6, r3, #1
 8000b2c:	2403      	movs	r4, #3
 8000b2e:	40b4      	lsls	r4, r6
 8000b30:	43e2      	mvns	r2, r4
 8000b32:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b36:	688c      	ldr	r4, [r1, #8]
 8000b38:	40b4      	lsls	r4, r6
 8000b3a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000b3c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3e:	684c      	ldr	r4, [r1, #4]
 8000b40:	2c12      	cmp	r4, #18
 8000b42:	bf18      	it	ne
 8000b44:	2c02      	cmpne	r4, #2
 8000b46:	d113      	bne.n	8000b70 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000b48:	08df      	lsrs	r7, r3, #3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b50:	f003 0407 	and.w	r4, r3, #7
 8000b54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000b58:	240f      	movs	r4, #15
 8000b5a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b5e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b62:	690c      	ldr	r4, [r1, #16]
 8000b64:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b68:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b6c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000b70:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b72:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b74:	684a      	ldr	r2, [r1, #4]
 8000b76:	f002 0203 	and.w	r2, r2, #3
 8000b7a:	40b2      	lsls	r2, r6
 8000b7c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b7e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b80:	684a      	ldr	r2, [r1, #4]
 8000b82:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b86:	d0a8      	beq.n	8000ada <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <HAL_GPIO_Init+0x1d8>)
 8000b8a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b8c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b90:	6454      	str	r4, [r2, #68]	; 0x44
 8000b92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b98:	9201      	str	r2, [sp, #4]
 8000b9a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b9c:	089c      	lsrs	r4, r3, #2
 8000b9e:	1ca6      	adds	r6, r4, #2
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_GPIO_Init+0x1d0>)
 8000ba2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ba6:	f003 0203 	and.w	r2, r3, #3
 8000baa:	0096      	lsls	r6, r2, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	40b2      	lsls	r2, r6
 8000bb0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_GPIO_Init+0x1dc>)
 8000bb6:	4290      	cmp	r0, r2
 8000bb8:	f43f af5b 	beq.w	8000a72 <HAL_GPIO_Init+0x12>
 8000bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d022      	beq.n	8000c0a <HAL_GPIO_Init+0x1aa>
 8000bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d020      	beq.n	8000c0e <HAL_GPIO_Init+0x1ae>
 8000bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	d01e      	beq.n	8000c12 <HAL_GPIO_Init+0x1b2>
 8000bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d01c      	beq.n	8000c16 <HAL_GPIO_Init+0x1b6>
 8000bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000be0:	4290      	cmp	r0, r2
 8000be2:	d01a      	beq.n	8000c1a <HAL_GPIO_Init+0x1ba>
 8000be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000be8:	4290      	cmp	r0, r2
 8000bea:	d018      	beq.n	8000c1e <HAL_GPIO_Init+0x1be>
 8000bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d016      	beq.n	8000c22 <HAL_GPIO_Init+0x1c2>
 8000bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	d014      	beq.n	8000c26 <HAL_GPIO_Init+0x1c6>
 8000bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f43f af34 	beq.w	8000a6e <HAL_GPIO_Init+0xe>
 8000c06:	220a      	movs	r2, #10
 8000c08:	e734      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	e732      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c0e:	2202      	movs	r2, #2
 8000c10:	e730      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c12:	2203      	movs	r2, #3
 8000c14:	e72e      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c16:	2204      	movs	r2, #4
 8000c18:	e72c      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c1a:	2205      	movs	r2, #5
 8000c1c:	e72a      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c1e:	2206      	movs	r2, #6
 8000c20:	e728      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c22:	2207      	movs	r2, #7
 8000c24:	e726      	b.n	8000a74 <HAL_GPIO_Init+0x14>
 8000c26:	2208      	movs	r2, #8
 8000c28:	e724      	b.n	8000a74 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c2a:	b003      	add	sp, #12
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	4770      	bx	lr
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40013c00 	.word	0x40013c00
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c40:	b510      	push	{r4, lr}
 8000c42:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c62:	f7ff fe9d 	bl	80009a0 <HAL_GetTick>
 8000c66:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c70:	d108      	bne.n	8000c84 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c72:	f7ff fe95 	bl	80009a0 <HAL_GetTick>
 8000c76:	1b00      	subs	r0, r0, r4
 8000c78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c7c:	d9f4      	bls.n	8000c68 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000c7e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000c80:	b002      	add	sp, #8
 8000c82:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000c8e:	f7ff fe87 	bl	80009a0 <HAL_GetTick>
 8000c92:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c9c:	d107      	bne.n	8000cae <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c9e:	f7ff fe7f 	bl	80009a0 <HAL_GetTick>
 8000ca2:	1b00      	subs	r0, r0, r4
 8000ca4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ca8:	d9f4      	bls.n	8000c94 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000caa:	2003      	movs	r0, #3
 8000cac:	e7e8      	b.n	8000c80 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000cae:	2000      	movs	r0, #0
 8000cb0:	e7e6      	b.n	8000c80 <HAL_PWREx_EnableOverDrive+0x40>
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f000 8206 	beq.w	80010ce <HAL_RCC_OscConfig+0x412>
{
 8000cc2:	b570      	push	{r4, r5, r6, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	f013 0f01 	tst.w	r3, #1
 8000cce:	d029      	beq.n	8000d24 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd0:	4ba7      	ldr	r3, [pc, #668]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d01a      	beq.n	8000d12 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cdc:	4ba4      	ldr	r3, [pc, #656]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d00f      	beq.n	8000d08 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cee:	d040      	beq.n	8000d72 <HAL_RCC_OscConfig+0xb6>
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d154      	bne.n	8000d9e <HAL_RCC_OscConfig+0xe2>
 8000cf4:	4b9e      	ldr	r3, [pc, #632]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e039      	b.n	8000d7c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d08:	4b99      	ldr	r3, [pc, #612]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d10:	d0ea      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4b97      	ldr	r3, [pc, #604]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d1a:	d003      	beq.n	8000d24 <HAL_RCC_OscConfig+0x68>
 8000d1c:	6863      	ldr	r3, [r4, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 81d7 	beq.w	80010d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	f013 0f02 	tst.w	r3, #2
 8000d2a:	d074      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d2c:	4b90      	ldr	r3, [pc, #576]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f013 0f0c 	tst.w	r3, #12
 8000d34:	d05e      	beq.n	8000df4 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b8e      	ldr	r3, [pc, #568]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d053      	beq.n	8000dea <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d42:	68e3      	ldr	r3, [r4, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 8089 	beq.w	8000e5c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4a:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fe24 	bl	80009a0 <HAL_GetTick>
 8000d58:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f013 0f02 	tst.w	r3, #2
 8000d62:	d172      	bne.n	8000e4a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fe1c 	bl	80009a0 <HAL_GetTick>
 8000d68:	1b40      	subs	r0, r0, r5
 8000d6a:	2802      	cmp	r0, #2
 8000d6c:	d9f5      	bls.n	8000d5a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000d6e:	2003      	movs	r0, #3
 8000d70:	e1b4      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	4a7f      	ldr	r2, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7c:	6863      	ldr	r3, [r4, #4]
 8000d7e:	b32b      	cbz	r3, 8000dcc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000d80:	f7ff fe0e 	bl	80009a0 <HAL_GetTick>
 8000d84:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d8e:	d1c9      	bne.n	8000d24 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fe06 	bl	80009a0 <HAL_GetTick>
 8000d94:	1b40      	subs	r0, r0, r5
 8000d96:	2864      	cmp	r0, #100	; 0x64
 8000d98:	d9f5      	bls.n	8000d86 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	e19e      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da2:	d009      	beq.n	8000db8 <HAL_RCC_OscConfig+0xfc>
 8000da4:	4b72      	ldr	r3, [pc, #456]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e7e1      	b.n	8000d7c <HAL_RCC_OscConfig+0xc0>
 8000db8:	4b6d      	ldr	r3, [pc, #436]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e7d7      	b.n	8000d7c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fde8 	bl	80009a0 <HAL_GetTick>
 8000dd0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dda:	d0a3      	beq.n	8000d24 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fde0 	bl	80009a0 <HAL_GetTick>
 8000de0:	1b40      	subs	r0, r0, r5
 8000de2:	2864      	cmp	r0, #100	; 0x64
 8000de4:	d9f5      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000de6:	2003      	movs	r0, #3
 8000de8:	e178      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dea:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000df2:	d1a6      	bne.n	8000d42 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df4:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f013 0f02 	tst.w	r3, #2
 8000dfc:	d003      	beq.n	8000e06 <HAL_RCC_OscConfig+0x14a>
 8000dfe:	68e3      	ldr	r3, [r4, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f040 8168 	bne.w	80010d6 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e08:	6813      	ldr	r3, [r2, #0]
 8000e0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e0e:	6921      	ldr	r1, [r4, #16]
 8000e10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e14:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	f013 0f08 	tst.w	r3, #8
 8000e1c:	d046      	beq.n	8000eac <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e1e:	6963      	ldr	r3, [r4, #20]
 8000e20:	b383      	cbz	r3, 8000e84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e22:	4a53      	ldr	r2, [pc, #332]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e24:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fdb8 	bl	80009a0 <HAL_GetTick>
 8000e30:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e36:	f013 0f02 	tst.w	r3, #2
 8000e3a:	d137      	bne.n	8000eac <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fdb0 	bl	80009a0 <HAL_GetTick>
 8000e40:	1b40      	subs	r0, r0, r5
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9f5      	bls.n	8000e32 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e148      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e4c:	6813      	ldr	r3, [r2, #0]
 8000e4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e52:	6921      	ldr	r1, [r4, #16]
 8000e54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e7dc      	b.n	8000e16 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000e5c:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e66:	f7ff fd9b 	bl	80009a0 <HAL_GetTick>
 8000e6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f013 0f02 	tst.w	r3, #2
 8000e74:	d0cf      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fd93 	bl	80009a0 <HAL_GetTick>
 8000e7a:	1b40      	subs	r0, r0, r5
 8000e7c:	2802      	cmp	r0, #2
 8000e7e:	d9f5      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000e80:	2003      	movs	r0, #3
 8000e82:	e12b      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e84:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e86:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fd87 	bl	80009a0 <HAL_GetTick>
 8000e92:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e98:	f013 0f02 	tst.w	r3, #2
 8000e9c:	d006      	beq.n	8000eac <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fd7f 	bl	80009a0 <HAL_GetTick>
 8000ea2:	1b40      	subs	r0, r0, r5
 8000ea4:	2802      	cmp	r0, #2
 8000ea6:	d9f5      	bls.n	8000e94 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	e117      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	f013 0f04 	tst.w	r3, #4
 8000eb2:	d07d      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ed2:	2501      	movs	r5, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000ed6:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ee0:	d00e      	beq.n	8000f00 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	68a3      	ldr	r3, [r4, #8]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d01f      	beq.n	8000f28 <HAL_RCC_OscConfig+0x26c>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d135      	bne.n	8000f58 <HAL_RCC_OscConfig+0x29c>
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ef8:	f022 0204 	bic.w	r2, r2, #4
 8000efc:	671a      	str	r2, [r3, #112]	; 0x70
 8000efe:	e018      	b.n	8000f32 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fd49 	bl	80009a0 <HAL_GetTick>
 8000f0e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f18:	d1e3      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1a:	f7ff fd41 	bl	80009a0 <HAL_GetTick>
 8000f1e:	1b80      	subs	r0, r0, r6
 8000f20:	2864      	cmp	r0, #100	; 0x64
 8000f22:	d9f5      	bls.n	8000f10 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8000f24:	2003      	movs	r0, #3
 8000f26:	e0d9      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000f2a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f32:	68a3      	ldr	r3, [r4, #8]
 8000f34:	b353      	cbz	r3, 8000f8c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f36:	f7ff fd33 	bl	80009a0 <HAL_GetTick>
 8000f3a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	d133      	bne.n	8000fae <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fd2b 	bl	80009a0 <HAL_GetTick>
 8000f4a:	1b80      	subs	r0, r0, r6
 8000f4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f50:	4298      	cmp	r0, r3
 8000f52:	d9f3      	bls.n	8000f3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8000f54:	2003      	movs	r0, #3
 8000f56:	e0c1      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d00d      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2bc>
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	671a      	str	r2, [r3, #112]	; 0x70
 8000f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f68:	f022 0204 	bic.w	r2, r2, #4
 8000f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f6e:	e7e0      	b.n	8000f32 <HAL_RCC_OscConfig+0x276>
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000
 8000f78:	4b60      	ldr	r3, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	671a      	str	r2, [r3, #112]	; 0x70
 8000f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	671a      	str	r2, [r3, #112]	; 0x70
 8000f8a:	e7d2      	b.n	8000f32 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fd08 	bl	80009a0 <HAL_GetTick>
 8000f90:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f92:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	f013 0f02 	tst.w	r3, #2
 8000f9a:	d008      	beq.n	8000fae <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fd00 	bl	80009a0 <HAL_GetTick>
 8000fa0:	1b80      	subs	r0, r0, r6
 8000fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d9f3      	bls.n	8000f92 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8000faa:	2003      	movs	r0, #3
 8000fac:	e096      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fae:	b9fd      	cbnz	r5, 8000ff0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb0:	69a3      	ldr	r3, [r4, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8091 	beq.w	80010da <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000fba:	6892      	ldr	r2, [r2, #8]
 8000fbc:	f002 020c 	and.w	r2, r2, #12
 8000fc0:	2a08      	cmp	r2, #8
 8000fc2:	d059      	beq.n	8001078 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d019      	beq.n	8000ffc <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000fca:	6813      	ldr	r3, [r2, #0]
 8000fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fce5 	bl	80009a0 <HAL_GetTick>
 8000fd6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd8:	4b48      	ldr	r3, [pc, #288]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fe0:	d048      	beq.n	8001074 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fcdd 	bl	80009a0 <HAL_GetTick>
 8000fe6:	1b00      	subs	r0, r0, r4
 8000fe8:	2802      	cmp	r0, #2
 8000fea:	d9f5      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8000fec:	2003      	movs	r0, #3
 8000fee:	e075      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000ff2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	e7d9      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8000ffc:	4a3f      	ldr	r2, [pc, #252]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001004:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001006:	f7ff fccb 	bl	80009a0 <HAL_GetTick>
 800100a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001014:	d006      	beq.n	8001024 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fcc3 	bl	80009a0 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	d9f5      	bls.n	800100c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001020:	2003      	movs	r0, #3
 8001022:	e05b      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	6a22      	ldr	r2, [r4, #32]
 8001028:	4313      	orrs	r3, r2
 800102a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800102c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001030:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001032:	0852      	lsrs	r2, r2, #1
 8001034:	3a01      	subs	r2, #1
 8001036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800103a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800103c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001040:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001042:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 8001048:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001050:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001052:	f7ff fca5 	bl	80009a0 <HAL_GetTick>
 8001056:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001060:	d106      	bne.n	8001070 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001062:	f7ff fc9d 	bl	80009a0 <HAL_GetTick>
 8001066:	1b00      	subs	r0, r0, r4
 8001068:	2802      	cmp	r0, #2
 800106a:	d9f5      	bls.n	8001058 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800106c:	2003      	movs	r0, #3
 800106e:	e035      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001070:	2000      	movs	r0, #0
 8001072:	e033      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 8001074:	2000      	movs	r0, #0
 8001076:	e031      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <HAL_RCC_OscConfig+0x440>)
 800107a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800107c:	2b01      	cmp	r3, #1
 800107e:	d02f      	beq.n	80010e0 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001080:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001084:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001086:	428b      	cmp	r3, r1
 8001088:	d12c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800108a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800108e:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001090:	428b      	cmp	r3, r1
 8001092:	d129      	bne.n	80010e8 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001094:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800109a:	4013      	ands	r3, r2
 800109c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80010a0:	d124      	bne.n	80010ec <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010a2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80010a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ac:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80010b0:	d11e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010b2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80010b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010b8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80010bc:	d11a      	bne.n	80010f4 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80010be:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80010c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010c4:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
 80010cc:	e006      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
}
 80010d0:	4770      	bx	lr
        return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	e002      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e000      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80010da:	2000      	movs	r0, #0
}
 80010dc:	b002      	add	sp, #8
 80010de:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
 80010e2:	e7fb      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010e4:	2001      	movs	r0, #1
 80010e6:	e7f9      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010e8:	2001      	movs	r0, #1
 80010ea:	e7f7      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010ec:	2001      	movs	r0, #1
 80010ee:	e7f5      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010f0:	2001      	movs	r0, #1
 80010f2:	e7f3      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7f1      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010f8:	2001      	movs	r0, #1
 80010fa:	e7ef      	b.n	80010dc <HAL_RCC_OscConfig+0x420>
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_RCC_GetSysClockFreq+0x94>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b04      	cmp	r3, #4
 800110c:	d03d      	beq.n	800118a <HAL_RCC_GetSysClockFreq+0x8a>
 800110e:	2b08      	cmp	r3, #8
 8001110:	d13d      	bne.n	800118e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_RCC_GetSysClockFreq+0x94>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001120:	d012      	beq.n	8001148 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_RCC_GetSysClockFreq+0x94>)
 8001124:	6859      	ldr	r1, [r3, #4]
 8001126:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800112a:	2300      	movs	r3, #0
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <HAL_RCC_GetSysClockFreq+0x98>)
 800112e:	fba1 0100 	umull	r0, r1, r1, r0
 8001132:	f7ff f8d5 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_RCC_GetSysClockFreq+0x94>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800113e:	3301      	adds	r3, #1
 8001140:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001142:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001146:	e023      	b.n	8001190 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_RCC_GetSysClockFreq+0x94>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001150:	015c      	lsls	r4, r3, #5
 8001152:	2500      	movs	r5, #0
 8001154:	1ae4      	subs	r4, r4, r3
 8001156:	f165 0500 	sbc.w	r5, r5, #0
 800115a:	01ae      	lsls	r6, r5, #6
 800115c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001160:	01a7      	lsls	r7, r4, #6
 8001162:	1b38      	subs	r0, r7, r4
 8001164:	eb66 0105 	sbc.w	r1, r6, r5
 8001168:	00cc      	lsls	r4, r1, #3
 800116a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800116e:	00c5      	lsls	r5, r0, #3
 8001170:	18e8      	adds	r0, r5, r3
 8001172:	f144 0100 	adc.w	r1, r4, #0
 8001176:	028b      	lsls	r3, r1, #10
 8001178:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800117c:	0284      	lsls	r4, r0, #10
 800117e:	4620      	mov	r0, r4
 8001180:	4619      	mov	r1, r3
 8001182:	2300      	movs	r3, #0
 8001184:	f7ff f8ac 	bl	80002e0 <__aeabi_uldivmod>
 8001188:	e7d5      	b.n	8001136 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <HAL_RCC_GetSysClockFreq+0x98>)
 800118c:	e000      	b.n	8001190 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	017d7840 	.word	0x017d7840
 800119c:	00f42400 	.word	0x00f42400

080011a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011a0:	2800      	cmp	r0, #0
 80011a2:	f000 80a0 	beq.w	80012e6 <HAL_RCC_ClockConfig+0x146>
{
 80011a6:	b570      	push	{r4, r5, r6, lr}
 80011a8:	460d      	mov	r5, r1
 80011aa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <HAL_RCC_ClockConfig+0x158>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d20b      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_RCC_ClockConfig+0x158>)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	428b      	cmp	r3, r1
 80011cc:	f040 808d 	bne.w	80012ea <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	f013 0f02 	tst.w	r3, #2
 80011d6:	d017      	beq.n	8001208 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	f013 0f04 	tst.w	r3, #4
 80011dc:	d004      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011de:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	f013 0f08 	tst.w	r3, #8
 80011ee:	d004      	beq.n	80011fa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4a42      	ldr	r2, [pc, #264]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80011f2:	6893      	ldr	r3, [r2, #8]
 80011f4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011f8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fa:	4a40      	ldr	r2, [pc, #256]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80011fc:	6893      	ldr	r3, [r2, #8]
 80011fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001202:	68a1      	ldr	r1, [r4, #8]
 8001204:	430b      	orrs	r3, r1
 8001206:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f01 	tst.w	r3, #1
 800120e:	d031      	beq.n	8001274 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001210:	6863      	ldr	r3, [r4, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d020      	beq.n	8001258 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001216:	2b02      	cmp	r3, #2
 8001218:	d025      	beq.n	8001266 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4a38      	ldr	r2, [pc, #224]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f012 0f02 	tst.w	r2, #2
 8001222:	d064      	beq.n	80012ee <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 8001226:	688a      	ldr	r2, [r1, #8]
 8001228:	f022 0203 	bic.w	r2, r2, #3
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001230:	f7ff fbb6 	bl	80009a0 <HAL_GetTick>
 8001234:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	6862      	ldr	r2, [r4, #4]
 8001240:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001244:	d016      	beq.n	8001274 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001246:	f7ff fbab 	bl	80009a0 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001250:	4298      	cmp	r0, r3
 8001252:	d9f0      	bls.n	8001236 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001254:	2003      	movs	r0, #3
 8001256:	e045      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001258:	4a28      	ldr	r2, [pc, #160]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001260:	d1e0      	bne.n	8001224 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
 8001264:	e03e      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800126e:	d1d9      	bne.n	8001224 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
 8001272:	e037      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x158>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	42ab      	cmp	r3, r5
 800127e:	d90a      	bls.n	8001296 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_RCC_ClockConfig+0x158>)
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	432b      	orrs	r3, r5
 800128a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	42ab      	cmp	r3, r5
 8001294:	d12d      	bne.n	80012f2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	f013 0f04 	tst.w	r3, #4
 800129c:	d006      	beq.n	80012ac <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80012a0:	6893      	ldr	r3, [r2, #8]
 80012a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012a6:	68e1      	ldr	r1, [r4, #12]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	f013 0f08 	tst.w	r3, #8
 80012b2:	d007      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80012b6:	6893      	ldr	r3, [r2, #8]
 80012b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012bc:	6921      	ldr	r1, [r4, #16]
 80012be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c4:	f7ff ff1c 	bl	8001100 <HAL_RCC_GetSysClockFreq>
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_RCC_ClockConfig+0x15c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_RCC_ClockConfig+0x160>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	40d8      	lsrs	r0, r3
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_ClockConfig+0x164>)
 80012d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x168>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f7ff fb19 	bl	8000914 <HAL_InitTick>
  return HAL_OK;
 80012e2:	2000      	movs	r0, #0
}
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
}
 80012e8:	4770      	bx	lr
      return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7fa      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
 80012f0:	e7f8      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80012f2:	2001      	movs	r0, #1
 80012f4:	e7f6      	b.n	80012e4 <HAL_RCC_ClockConfig+0x144>
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	08002bc0 	.word	0x08002bc0
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008

0800130c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <HAL_RCC_GetHCLKFreq+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000

08001318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001318:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800131a:	f7ff fff7 	bl	800130c <HAL_RCC_GetHCLKFreq>
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
}
 800132a:	40d8      	lsrs	r0, r3
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	08002bd0 	.word	0x08002bd0

08001338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001338:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800133a:	f7ff ffe7 	bl	800130c <HAL_RCC_GetHCLKFreq>
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001346:	4a03      	ldr	r2, [pc, #12]	; (8001354 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
}
 800134a:	40d8      	lsrs	r0, r3
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	08002bd0 	.word	0x08002bd0

08001358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800135c:	6883      	ldr	r3, [r0, #8]
 800135e:	6902      	ldr	r2, [r0, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	6942      	ldr	r2, [r0, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	69c2      	ldr	r2, [r0, #28]
 8001368:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800136a:	6801      	ldr	r1, [r0, #0]
 800136c:	6808      	ldr	r0, [r1, #0]
 800136e:	4a9f      	ldr	r2, [pc, #636]	; (80015ec <UART_SetConfig+0x294>)
 8001370:	4002      	ands	r2, r0
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6853      	ldr	r3, [r2, #4]
 800137a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800137e:	68e1      	ldr	r1, [r4, #12]
 8001380:	430b      	orrs	r3, r1
 8001382:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001384:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001386:	6a23      	ldr	r3, [r4, #32]
 8001388:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800138a:	6821      	ldr	r1, [r4, #0]
 800138c:	688b      	ldr	r3, [r1, #8]
 800138e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	4a95      	ldr	r2, [pc, #596]	; (80015f0 <UART_SetConfig+0x298>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <UART_SetConfig+0x7a>
 800139e:	4a95      	ldr	r2, [pc, #596]	; (80015f4 <UART_SetConfig+0x29c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d029      	beq.n	80013f8 <UART_SetConfig+0xa0>
 80013a4:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <UART_SetConfig+0x2a0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d03e      	beq.n	8001428 <UART_SetConfig+0xd0>
 80013aa:	4a94      	ldr	r2, [pc, #592]	; (80015fc <UART_SetConfig+0x2a4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d062      	beq.n	8001476 <UART_SetConfig+0x11e>
 80013b0:	4a93      	ldr	r2, [pc, #588]	; (8001600 <UART_SetConfig+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d071      	beq.n	800149a <UART_SetConfig+0x142>
 80013b6:	4a93      	ldr	r2, [pc, #588]	; (8001604 <UART_SetConfig+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f000 8083 	beq.w	80014c4 <UART_SetConfig+0x16c>
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <UART_SetConfig+0x2b0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f000 8094 	beq.w	80014ee <UART_SetConfig+0x196>
 80013c6:	4a91      	ldr	r2, [pc, #580]	; (800160c <UART_SetConfig+0x2b4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f000 80a5 	beq.w	8001518 <UART_SetConfig+0x1c0>
 80013ce:	2510      	movs	r5, #16
 80013d0:	e03a      	b.n	8001448 <UART_SetConfig+0xf0>
 80013d2:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <UART_SetConfig+0x2b8>)
 80013d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d809      	bhi.n	80013f4 <UART_SetConfig+0x9c>
 80013e0:	e8df f003 	tbb	[pc, r3]
 80013e4:	06ae0402 	.word	0x06ae0402
 80013e8:	2501      	movs	r5, #1
 80013ea:	e02d      	b.n	8001448 <UART_SetConfig+0xf0>
 80013ec:	2504      	movs	r5, #4
 80013ee:	e02b      	b.n	8001448 <UART_SetConfig+0xf0>
 80013f0:	2508      	movs	r5, #8
 80013f2:	e029      	b.n	8001448 <UART_SetConfig+0xf0>
 80013f4:	2510      	movs	r5, #16
 80013f6:	e027      	b.n	8001448 <UART_SetConfig+0xf0>
 80013f8:	4b85      	ldr	r3, [pc, #532]	; (8001610 <UART_SetConfig+0x2b8>)
 80013fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d80e      	bhi.n	8001424 <UART_SetConfig+0xcc>
 8001406:	e8df f003 	tbb	[pc, r3]
 800140a:	0d07      	.short	0x0d07
 800140c:	0d090d0d 	.word	0x0d090d0d
 8001410:	0d9d0d0d 	.word	0x0d9d0d0d
 8001414:	0d0d      	.short	0x0d0d
 8001416:	0b          	.byte	0x0b
 8001417:	00          	.byte	0x00
 8001418:	2500      	movs	r5, #0
 800141a:	e015      	b.n	8001448 <UART_SetConfig+0xf0>
 800141c:	2504      	movs	r5, #4
 800141e:	e013      	b.n	8001448 <UART_SetConfig+0xf0>
 8001420:	2508      	movs	r5, #8
 8001422:	e011      	b.n	8001448 <UART_SetConfig+0xf0>
 8001424:	2510      	movs	r5, #16
 8001426:	e00f      	b.n	8001448 <UART_SetConfig+0xf0>
 8001428:	4b79      	ldr	r3, [pc, #484]	; (8001610 <UART_SetConfig+0x2b8>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001432:	2b20      	cmp	r3, #32
 8001434:	f000 8088 	beq.w	8001548 <UART_SetConfig+0x1f0>
 8001438:	d819      	bhi.n	800146e <UART_SetConfig+0x116>
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8086 	beq.w	800154c <UART_SetConfig+0x1f4>
 8001440:	2b10      	cmp	r3, #16
 8001442:	f040 8085 	bne.w	8001550 <UART_SetConfig+0x1f8>
 8001446:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001448:	69e3      	ldr	r3, [r4, #28]
 800144a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800144e:	f000 80ab 	beq.w	80015a8 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001452:	2d08      	cmp	r5, #8
 8001454:	f200 8140 	bhi.w	80016d8 <UART_SetConfig+0x380>
 8001458:	e8df f015 	tbh	[pc, r5, lsl #1]
 800145c:	01180107 	.word	0x01180107
 8001460:	013e0122 	.word	0x013e0122
 8001464:	013e012b 	.word	0x013e012b
 8001468:	013e013e 	.word	0x013e013e
 800146c:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 800146e:	2b30      	cmp	r3, #48	; 0x30
 8001470:	d170      	bne.n	8001554 <UART_SetConfig+0x1fc>
 8001472:	2508      	movs	r5, #8
 8001474:	e7e8      	b.n	8001448 <UART_SetConfig+0xf0>
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <UART_SetConfig+0x2b8>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001480:	2b80      	cmp	r3, #128	; 0x80
 8001482:	d069      	beq.n	8001558 <UART_SetConfig+0x200>
 8001484:	d805      	bhi.n	8001492 <UART_SetConfig+0x13a>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d068      	beq.n	800155c <UART_SetConfig+0x204>
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d168      	bne.n	8001560 <UART_SetConfig+0x208>
 800148e:	2504      	movs	r5, #4
 8001490:	e7da      	b.n	8001448 <UART_SetConfig+0xf0>
 8001492:	2bc0      	cmp	r3, #192	; 0xc0
 8001494:	d166      	bne.n	8001564 <UART_SetConfig+0x20c>
 8001496:	2508      	movs	r5, #8
 8001498:	e7d6      	b.n	8001448 <UART_SetConfig+0xf0>
 800149a:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <UART_SetConfig+0x2b8>)
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d05e      	beq.n	8001568 <UART_SetConfig+0x210>
 80014aa:	d806      	bhi.n	80014ba <UART_SetConfig+0x162>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05d      	beq.n	800156c <UART_SetConfig+0x214>
 80014b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b4:	d15c      	bne.n	8001570 <UART_SetConfig+0x218>
 80014b6:	2504      	movs	r5, #4
 80014b8:	e7c6      	b.n	8001448 <UART_SetConfig+0xf0>
 80014ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014be:	d159      	bne.n	8001574 <UART_SetConfig+0x21c>
 80014c0:	2508      	movs	r5, #8
 80014c2:	e7c1      	b.n	8001448 <UART_SetConfig+0xf0>
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <UART_SetConfig+0x2b8>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014d2:	d051      	beq.n	8001578 <UART_SetConfig+0x220>
 80014d4:	d806      	bhi.n	80014e4 <UART_SetConfig+0x18c>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d050      	beq.n	800157c <UART_SetConfig+0x224>
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d14f      	bne.n	8001580 <UART_SetConfig+0x228>
 80014e0:	2504      	movs	r5, #4
 80014e2:	e7b1      	b.n	8001448 <UART_SetConfig+0xf0>
 80014e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80014e8:	d14c      	bne.n	8001584 <UART_SetConfig+0x22c>
 80014ea:	2508      	movs	r5, #8
 80014ec:	e7ac      	b.n	8001448 <UART_SetConfig+0xf0>
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <UART_SetConfig+0x2b8>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80014f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fc:	d044      	beq.n	8001588 <UART_SetConfig+0x230>
 80014fe:	d806      	bhi.n	800150e <UART_SetConfig+0x1b6>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d043      	beq.n	800158c <UART_SetConfig+0x234>
 8001504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001508:	d142      	bne.n	8001590 <UART_SetConfig+0x238>
 800150a:	2504      	movs	r5, #4
 800150c:	e79c      	b.n	8001448 <UART_SetConfig+0xf0>
 800150e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001512:	d13f      	bne.n	8001594 <UART_SetConfig+0x23c>
 8001514:	2508      	movs	r5, #8
 8001516:	e797      	b.n	8001448 <UART_SetConfig+0xf0>
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <UART_SetConfig+0x2b8>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001526:	d037      	beq.n	8001598 <UART_SetConfig+0x240>
 8001528:	d805      	bhi.n	8001536 <UART_SetConfig+0x1de>
 800152a:	b3bb      	cbz	r3, 800159c <UART_SetConfig+0x244>
 800152c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001530:	d136      	bne.n	80015a0 <UART_SetConfig+0x248>
 8001532:	2504      	movs	r5, #4
 8001534:	e788      	b.n	8001448 <UART_SetConfig+0xf0>
 8001536:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800153a:	d133      	bne.n	80015a4 <UART_SetConfig+0x24c>
 800153c:	2508      	movs	r5, #8
 800153e:	e783      	b.n	8001448 <UART_SetConfig+0xf0>
 8001540:	2502      	movs	r5, #2
 8001542:	e781      	b.n	8001448 <UART_SetConfig+0xf0>
 8001544:	2502      	movs	r5, #2
 8001546:	e77f      	b.n	8001448 <UART_SetConfig+0xf0>
 8001548:	2502      	movs	r5, #2
 800154a:	e77d      	b.n	8001448 <UART_SetConfig+0xf0>
 800154c:	2500      	movs	r5, #0
 800154e:	e77b      	b.n	8001448 <UART_SetConfig+0xf0>
 8001550:	2510      	movs	r5, #16
 8001552:	e779      	b.n	8001448 <UART_SetConfig+0xf0>
 8001554:	2510      	movs	r5, #16
 8001556:	e777      	b.n	8001448 <UART_SetConfig+0xf0>
 8001558:	2502      	movs	r5, #2
 800155a:	e775      	b.n	8001448 <UART_SetConfig+0xf0>
 800155c:	2500      	movs	r5, #0
 800155e:	e773      	b.n	8001448 <UART_SetConfig+0xf0>
 8001560:	2510      	movs	r5, #16
 8001562:	e771      	b.n	8001448 <UART_SetConfig+0xf0>
 8001564:	2510      	movs	r5, #16
 8001566:	e76f      	b.n	8001448 <UART_SetConfig+0xf0>
 8001568:	2502      	movs	r5, #2
 800156a:	e76d      	b.n	8001448 <UART_SetConfig+0xf0>
 800156c:	2500      	movs	r5, #0
 800156e:	e76b      	b.n	8001448 <UART_SetConfig+0xf0>
 8001570:	2510      	movs	r5, #16
 8001572:	e769      	b.n	8001448 <UART_SetConfig+0xf0>
 8001574:	2510      	movs	r5, #16
 8001576:	e767      	b.n	8001448 <UART_SetConfig+0xf0>
 8001578:	2502      	movs	r5, #2
 800157a:	e765      	b.n	8001448 <UART_SetConfig+0xf0>
 800157c:	2501      	movs	r5, #1
 800157e:	e763      	b.n	8001448 <UART_SetConfig+0xf0>
 8001580:	2510      	movs	r5, #16
 8001582:	e761      	b.n	8001448 <UART_SetConfig+0xf0>
 8001584:	2510      	movs	r5, #16
 8001586:	e75f      	b.n	8001448 <UART_SetConfig+0xf0>
 8001588:	2502      	movs	r5, #2
 800158a:	e75d      	b.n	8001448 <UART_SetConfig+0xf0>
 800158c:	2500      	movs	r5, #0
 800158e:	e75b      	b.n	8001448 <UART_SetConfig+0xf0>
 8001590:	2510      	movs	r5, #16
 8001592:	e759      	b.n	8001448 <UART_SetConfig+0xf0>
 8001594:	2510      	movs	r5, #16
 8001596:	e757      	b.n	8001448 <UART_SetConfig+0xf0>
 8001598:	2502      	movs	r5, #2
 800159a:	e755      	b.n	8001448 <UART_SetConfig+0xf0>
 800159c:	2500      	movs	r5, #0
 800159e:	e753      	b.n	8001448 <UART_SetConfig+0xf0>
 80015a0:	2510      	movs	r5, #16
 80015a2:	e751      	b.n	8001448 <UART_SetConfig+0xf0>
 80015a4:	2510      	movs	r5, #16
 80015a6:	e74f      	b.n	8001448 <UART_SetConfig+0xf0>
    switch (clocksource)
 80015a8:	2d08      	cmp	r5, #8
 80015aa:	d85b      	bhi.n	8001664 <UART_SetConfig+0x30c>
 80015ac:	e8df f005 	tbb	[pc, r5]
 80015b0:	5a3d3205 	.word	0x5a3d3205
 80015b4:	5a5a5a46 	.word	0x5a5a5a46
 80015b8:	51          	.byte	0x51
 80015b9:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80015ba:	f7ff fead 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015be:	6862      	ldr	r2, [r4, #4]
 80015c0:	0853      	lsrs	r3, r2, #1
 80015c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ca:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015cc:	f1a3 0110 	sub.w	r1, r3, #16
 80015d0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80015d4:	4291      	cmp	r1, r2
 80015d6:	f200 8082 	bhi.w	80016de <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80015e4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	60d3      	str	r3, [r2, #12]
 80015ea:	e07b      	b.n	80016e4 <UART_SetConfig+0x38c>
 80015ec:	efff69f3 	.word	0xefff69f3
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40004800 	.word	0x40004800
 80015fc:	40004c00 	.word	0x40004c00
 8001600:	40005000 	.word	0x40005000
 8001604:	40011400 	.word	0x40011400
 8001608:	40007800 	.word	0x40007800
 800160c:	40007c00 	.word	0x40007c00
 8001610:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001614:	f7ff fe90 	bl	8001338 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	0853      	lsrs	r3, r2, #1
 800161c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001620:	fbb3 f3f2 	udiv	r3, r3, r2
 8001624:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001626:	2500      	movs	r5, #0
        break;
 8001628:	e7d0      	b.n	80015cc <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800162a:	6862      	ldr	r2, [r4, #4]
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <UART_SetConfig+0x398>)
 800162e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001632:	fbb3 f3f2 	udiv	r3, r3, r2
 8001636:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001638:	2500      	movs	r5, #0
        break;
 800163a:	e7c7      	b.n	80015cc <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 800163c:	f7ff fd60 	bl	8001100 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001640:	6862      	ldr	r2, [r4, #4]
 8001642:	0853      	lsrs	r3, r2, #1
 8001644:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001648:	fbb3 f3f2 	udiv	r3, r3, r2
 800164c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800164e:	2500      	movs	r5, #0
        break;
 8001650:	e7bc      	b.n	80015cc <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	0853      	lsrs	r3, r2, #1
 8001656:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800165a:	fbb3 f3f2 	udiv	r3, r3, r2
 800165e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001660:	2500      	movs	r5, #0
        break;
 8001662:	e7b3      	b.n	80015cc <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001664:	2501      	movs	r5, #1
 8001666:	2300      	movs	r3, #0
 8001668:	e7b0      	b.n	80015cc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800166a:	f7ff fe55 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800166e:	6862      	ldr	r2, [r4, #4]
 8001670:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001674:	fbb3 f3f2 	udiv	r3, r3, r2
 8001678:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800167a:	f1a3 0110 	sub.w	r1, r3, #16
 800167e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001682:	4291      	cmp	r1, r2
 8001684:	d82d      	bhi.n	80016e2 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	60d3      	str	r3, [r2, #12]
 800168a:	e02b      	b.n	80016e4 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800168c:	f7ff fe54 	bl	8001338 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001690:	6862      	ldr	r2, [r4, #4]
 8001692:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001696:	fbb3 f3f2 	udiv	r3, r3, r2
 800169a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800169c:	2500      	movs	r5, #0
        break;
 800169e:	e7ec      	b.n	800167a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016a0:	6862      	ldr	r2, [r4, #4]
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <UART_SetConfig+0x39c>)
 80016a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80016a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ae:	2500      	movs	r5, #0
        break;
 80016b0:	e7e3      	b.n	800167a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 80016b2:	f7ff fd25 	bl	8001100 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016b6:	6862      	ldr	r2, [r4, #4]
 80016b8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80016c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c2:	2500      	movs	r5, #0
        break;
 80016c4:	e7d9      	b.n	800167a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016c6:	6862      	ldr	r2, [r4, #4]
 80016c8:	0853      	lsrs	r3, r2, #1
 80016ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d4:	2500      	movs	r5, #0
        break;
 80016d6:	e7d0      	b.n	800167a <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016d8:	2501      	movs	r5, #1
 80016da:	2300      	movs	r3, #0
 80016dc:	e7cd      	b.n	800167a <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 80016de:	2501      	movs	r5, #1
 80016e0:	e000      	b.n	80016e4 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 80016e2:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80016e8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80016ea:	4628      	mov	r0, r5
 80016ec:	bd38      	pop	{r3, r4, r5, pc}
 80016ee:	bf00      	nop
 80016f0:	01e84800 	.word	0x01e84800
 80016f4:	00f42400 	.word	0x00f42400

080016f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016fa:	f013 0f01 	tst.w	r3, #1
 80016fe:	d006      	beq.n	800170e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001700:	6802      	ldr	r2, [r0, #0]
 8001702:	6853      	ldr	r3, [r2, #4]
 8001704:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001708:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800170a:	430b      	orrs	r3, r1
 800170c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800170e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001710:	f013 0f02 	tst.w	r3, #2
 8001714:	d006      	beq.n	8001724 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	6853      	ldr	r3, [r2, #4]
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001720:	430b      	orrs	r3, r1
 8001722:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001726:	f013 0f04 	tst.w	r3, #4
 800172a:	d006      	beq.n	800173a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800172c:	6802      	ldr	r2, [r0, #0]
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001736:	430b      	orrs	r3, r1
 8001738:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800173a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800173c:	f013 0f08 	tst.w	r3, #8
 8001740:	d006      	beq.n	8001750 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001742:	6802      	ldr	r2, [r0, #0]
 8001744:	6853      	ldr	r3, [r2, #4]
 8001746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800174a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800174c:	430b      	orrs	r3, r1
 800174e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001752:	f013 0f10 	tst.w	r3, #16
 8001756:	d006      	beq.n	8001766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001758:	6802      	ldr	r2, [r0, #0]
 800175a:	6893      	ldr	r3, [r2, #8]
 800175c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001760:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001762:	430b      	orrs	r3, r1
 8001764:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001766:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001768:	f013 0f20 	tst.w	r3, #32
 800176c:	d006      	beq.n	800177c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800176e:	6802      	ldr	r2, [r0, #0]
 8001770:	6893      	ldr	r3, [r2, #8]
 8001772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001776:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001778:	430b      	orrs	r3, r1
 800177a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800177c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800177e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001782:	d00a      	beq.n	800179a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001784:	6802      	ldr	r2, [r0, #0]
 8001786:	6853      	ldr	r3, [r2, #4]
 8001788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800178c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800178e:	430b      	orrs	r3, r1
 8001790:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001792:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001798:	d00b      	beq.n	80017b2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800179a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800179c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017a0:	d006      	beq.n	80017b0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017a2:	6802      	ldr	r2, [r0, #0]
 80017a4:	6853      	ldr	r3, [r2, #4]
 80017a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6053      	str	r3, [r2, #4]
  }
}
 80017b0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017b2:	6802      	ldr	r2, [r0, #0]
 80017b4:	6853      	ldr	r3, [r2, #4]
 80017b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80017ba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017bc:	430b      	orrs	r3, r1
 80017be:	6053      	str	r3, [r2, #4]
 80017c0:	e7eb      	b.n	800179a <UART_AdvFeatureConfig+0xa2>

080017c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c6:	4605      	mov	r5, r0
 80017c8:	460f      	mov	r7, r1
 80017ca:	4616      	mov	r6, r2
 80017cc:	4699      	mov	r9, r3
 80017ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017d2:	682c      	ldr	r4, [r5, #0]
 80017d4:	69e4      	ldr	r4, [r4, #28]
 80017d6:	ea37 0304 	bics.w	r3, r7, r4
 80017da:	bf0c      	ite	eq
 80017dc:	2401      	moveq	r4, #1
 80017de:	2400      	movne	r4, #0
 80017e0:	42b4      	cmp	r4, r6
 80017e2:	d13c      	bne.n	800185e <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80017e8:	d0f3      	beq.n	80017d2 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ea:	f7ff f8d9 	bl	80009a0 <HAL_GetTick>
 80017ee:	eba0 0009 	sub.w	r0, r0, r9
 80017f2:	4540      	cmp	r0, r8
 80017f4:	d821      	bhi.n	800183a <UART_WaitOnFlagUntilTimeout+0x78>
 80017f6:	f1b8 0f00 	cmp.w	r8, #0
 80017fa:	d01e      	beq.n	800183a <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	f012 0f04 	tst.w	r2, #4
 8001804:	d0e5      	beq.n	80017d2 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800180c:	d0e1      	beq.n	80017d2 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800180e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001812:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001814:	682a      	ldr	r2, [r5, #0]
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800181c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800181e:	682a      	ldr	r2, [r5, #0]
 8001820:	6893      	ldr	r3, [r2, #8]
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001828:	2320      	movs	r3, #32
 800182a:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800182c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800182e:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001830:	2300      	movs	r3, #0
 8001832:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
 8001838:	e012      	b.n	8001860 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800183a:	682a      	ldr	r2, [r5, #0]
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001842:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001844:	682a      	ldr	r2, [r5, #0]
 8001846:	6893      	ldr	r3, [r2, #8]
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800184e:	2320      	movs	r3, #32
 8001850:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001852:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001854:	2300      	movs	r3, #0
 8001856:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e000      	b.n	8001860 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
}
 8001860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001864 <HAL_UART_Transmit>:
{
 8001864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800186c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800186e:	2b20      	cmp	r3, #32
 8001870:	d159      	bne.n	8001926 <HAL_UART_Transmit+0xc2>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001878:	fab2 f382 	clz	r3, r2
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	2900      	cmp	r1, #0
 8001880:	bf08      	it	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d152      	bne.n	800192e <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001888:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800188c:	2b01      	cmp	r3, #1
 800188e:	d050      	beq.n	8001932 <HAL_UART_Transmit+0xce>
 8001890:	2301      	movs	r3, #1
 8001892:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800189a:	2321      	movs	r3, #33	; 0x21
 800189c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800189e:	f7ff f87f 	bl	80009a0 <HAL_GetTick>
 80018a2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80018a4:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80018a8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ac:	68a3      	ldr	r3, [r4, #8]
 80018ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b2:	d005      	beq.n	80018c0 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80018b4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80018be:	e014      	b.n	80018ea <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	b113      	cbz	r3, 80018ca <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80018c4:	f04f 0800 	mov.w	r8, #0
 80018c8:	e7f6      	b.n	80018b8 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80018ca:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80018cc:	2500      	movs	r5, #0
 80018ce:	e7f3      	b.n	80018b8 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018d0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018da:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80018dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80018e0:	b292      	uxth	r2, r2
 80018e2:	3a01      	subs	r2, #1
 80018e4:	b292      	uxth	r2, r2
 80018e6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80018ea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b173      	cbz	r3, 8001910 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f2:	9600      	str	r6, [sp, #0]
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff61 	bl	80017c2 <UART_WaitOnFlagUntilTimeout>
 8001900:	b9c8      	cbnz	r0, 8001936 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001902:	2d00      	cmp	r5, #0
 8001904:	d0e4      	beq.n	80018d0 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001906:	f815 2b01 	ldrb.w	r2, [r5], #1
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800190e:	e7e5      	b.n	80018dc <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001910:	9600      	str	r6, [sp, #0]
 8001912:	463b      	mov	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff52 	bl	80017c2 <UART_WaitOnFlagUntilTimeout>
 800191e:	b960      	cbnz	r0, 800193a <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001920:	2320      	movs	r3, #32
 8001922:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001924:	e000      	b.n	8001928 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001926:	2002      	movs	r0, #2
}
 8001928:	b002      	add	sp, #8
 800192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	e7fa      	b.n	8001928 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001932:	2002      	movs	r0, #2
 8001934:	e7f8      	b.n	8001928 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
 8001938:	e7f6      	b.n	8001928 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800193a:	2003      	movs	r0, #3
 800193c:	e7f4      	b.n	8001928 <HAL_UART_Transmit+0xc4>

0800193e <HAL_UART_Receive>:
{
 800193e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001946:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001948:	2b20      	cmp	r3, #32
 800194a:	f040 8081 	bne.w	8001a50 <HAL_UART_Receive+0x112>
 800194e:	4604      	mov	r4, r0
 8001950:	460d      	mov	r5, r1
 8001952:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001954:	fab2 f382 	clz	r3, r2
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	2900      	cmp	r1, #0
 800195c:	bf08      	it	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d179      	bne.n	8001a58 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001964:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001968:	2b01      	cmp	r3, #1
 800196a:	d077      	beq.n	8001a5c <HAL_UART_Receive+0x11e>
 800196c:	2301      	movs	r3, #1
 800196e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001976:	2322      	movs	r3, #34	; 0x22
 8001978:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800197a:	f7ff f811 	bl	80009a0 <HAL_GetTick>
 800197e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001980:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001984:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001988:	68a3      	ldr	r3, [r4, #8]
 800198a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198e:	d006      	beq.n	800199e <HAL_UART_Receive+0x60>
 8001990:	b9a3      	cbnz	r3, 80019bc <HAL_UART_Receive+0x7e>
 8001992:	6922      	ldr	r2, [r4, #16]
 8001994:	b972      	cbnz	r2, 80019b4 <HAL_UART_Receive+0x76>
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800199c:	e014      	b.n	80019c8 <HAL_UART_Receive+0x8a>
 800199e:	6922      	ldr	r2, [r4, #16]
 80019a0:	b922      	cbnz	r2, 80019ac <HAL_UART_Receive+0x6e>
 80019a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80019a6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019aa:	e00d      	b.n	80019c8 <HAL_UART_Receive+0x8a>
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019b2:	e009      	b.n	80019c8 <HAL_UART_Receive+0x8a>
 80019b4:	227f      	movs	r2, #127	; 0x7f
 80019b6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019ba:	e005      	b.n	80019c8 <HAL_UART_Receive+0x8a>
 80019bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019c0:	d00d      	beq.n	80019de <HAL_UART_Receive+0xa0>
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80019c8:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d0:	d00f      	beq.n	80019f2 <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 80019d2:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 80019d6:	2300      	movs	r3, #0
 80019d8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 80019dc:	e01e      	b.n	8001a1c <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 80019de:	6922      	ldr	r2, [r4, #16]
 80019e0:	b91a      	cbnz	r2, 80019ea <HAL_UART_Receive+0xac>
 80019e2:	227f      	movs	r2, #127	; 0x7f
 80019e4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019e8:	e7ee      	b.n	80019c8 <HAL_UART_Receive+0x8a>
 80019ea:	223f      	movs	r2, #63	; 0x3f
 80019ec:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019f0:	e7ea      	b.n	80019c8 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f2:	6923      	ldr	r3, [r4, #16]
 80019f4:	b113      	cbz	r3, 80019fc <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 80019f6:	f04f 0900 	mov.w	r9, #0
 80019fa:	e7ec      	b.n	80019d6 <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 80019fc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80019fe:	2500      	movs	r5, #0
 8001a00:	e7e9      	b.n	80019d6 <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	ea08 0303 	and.w	r3, r8, r3
 8001a0a:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001a0e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001a12:	b292      	uxth	r2, r2
 8001a14:	3a01      	subs	r2, #1
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001a1c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b18b      	cbz	r3, 8001a48 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a24:	9600      	str	r6, [sp, #0]
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fec8 	bl	80017c2 <UART_WaitOnFlagUntilTimeout>
 8001a32:	b9a8      	cbnz	r0, 8001a60 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001a34:	2d00      	cmp	r5, #0
 8001a36:	d0e4      	beq.n	8001a02 <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3c:	fa5f f388 	uxtb.w	r3, r8
 8001a40:	4013      	ands	r3, r2
 8001a42:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001a46:	e7e2      	b.n	8001a0e <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001a50:	2002      	movs	r0, #2
}
 8001a52:	b003      	add	sp, #12
 8001a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
 8001a5a:	e7fa      	b.n	8001a52 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	e7f8      	b.n	8001a52 <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001a60:	2003      	movs	r0, #3
 8001a62:	e7f6      	b.n	8001a52 <HAL_UART_Receive+0x114>

08001a64 <UART_CheckIdleState>:
{
 8001a64:	b530      	push	{r4, r5, lr}
 8001a66:	b083      	sub	sp, #12
 8001a68:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a6e:	f7fe ff97 	bl	80009a0 <HAL_GetTick>
 8001a72:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f013 0f08 	tst.w	r3, #8
 8001a7c:	d10c      	bne.n	8001a98 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f013 0f04 	tst.w	r3, #4
 8001a86:	d115      	bne.n	8001ab4 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001a94:	b003      	add	sp, #12
 8001a96:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fe8b 	bl	80017c2 <UART_WaitOnFlagUntilTimeout>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d0e6      	beq.n	8001a7e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	e7ef      	b.n	8001a94 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	462b      	mov	r3, r5
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fe7d 	bl	80017c2 <UART_WaitOnFlagUntilTimeout>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d0dd      	beq.n	8001a88 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	e7e1      	b.n	8001a94 <UART_CheckIdleState+0x30>

08001ad0 <HAL_UART_Init>:
  if (huart == NULL)
 8001ad0:	b368      	cbz	r0, 8001b2e <HAL_UART_Init+0x5e>
{
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001ad8:	b303      	cbz	r3, 8001b1c <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ada:	2324      	movs	r3, #36	; 0x24
 8001adc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	6813      	ldr	r3, [r2, #0]
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff fc35 	bl	8001358 <UART_SetConfig>
 8001aee:	2801      	cmp	r0, #1
 8001af0:	d013      	beq.n	8001b1a <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af4:	b9bb      	cbnz	r3, 8001b26 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af6:	6822      	ldr	r2, [r4, #0]
 8001af8:	6853      	ldr	r3, [r2, #4]
 8001afa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001afe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b00:	6822      	ldr	r2, [r4, #0]
 8001b02:	6893      	ldr	r3, [r2, #8]
 8001b04:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b08:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ffa5 	bl	8001a64 <UART_CheckIdleState>
}
 8001b1a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b1c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b20:	f7fe fe2c 	bl	800077c <HAL_UART_MspInit>
 8001b24:	e7d9      	b.n	8001ada <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7ff fde6 	bl	80016f8 <UART_AdvFeatureConfig>
 8001b2c:	e7e3      	b.n	8001af6 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
}
 8001b30:	4770      	bx	lr
	...

08001b34 <__sflush_r>:
 8001b34:	898a      	ldrh	r2, [r1, #12]
 8001b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	0710      	lsls	r0, r2, #28
 8001b3e:	460c      	mov	r4, r1
 8001b40:	d458      	bmi.n	8001bf4 <__sflush_r+0xc0>
 8001b42:	684b      	ldr	r3, [r1, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dc05      	bgt.n	8001b54 <__sflush_r+0x20>
 8001b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc02      	bgt.n	8001b54 <__sflush_r+0x20>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	d0f9      	beq.n	8001b4e <__sflush_r+0x1a>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b60:	682f      	ldr	r7, [r5, #0]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	d032      	beq.n	8001bcc <__sflush_r+0x98>
 8001b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	075a      	lsls	r2, r3, #29
 8001b6c:	d505      	bpl.n	8001b7a <__sflush_r+0x46>
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	1ac0      	subs	r0, r0, r3
 8001b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b74:	b10b      	cbz	r3, 8001b7a <__sflush_r+0x46>
 8001b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b78:	1ac0      	subs	r0, r0, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b80:	6a21      	ldr	r1, [r4, #32]
 8001b82:	4628      	mov	r0, r5
 8001b84:	47b0      	blx	r6
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	d106      	bne.n	8001b9a <__sflush_r+0x66>
 8001b8c:	6829      	ldr	r1, [r5, #0]
 8001b8e:	291d      	cmp	r1, #29
 8001b90:	d82c      	bhi.n	8001bec <__sflush_r+0xb8>
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <__sflush_r+0x108>)
 8001b94:	40ca      	lsrs	r2, r1
 8001b96:	07d6      	lsls	r6, r2, #31
 8001b98:	d528      	bpl.n	8001bec <__sflush_r+0xb8>
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6062      	str	r2, [r4, #4]
 8001b9e:	04d9      	lsls	r1, r3, #19
 8001ba0:	6922      	ldr	r2, [r4, #16]
 8001ba2:	6022      	str	r2, [r4, #0]
 8001ba4:	d504      	bpl.n	8001bb0 <__sflush_r+0x7c>
 8001ba6:	1c42      	adds	r2, r0, #1
 8001ba8:	d101      	bne.n	8001bae <__sflush_r+0x7a>
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	b903      	cbnz	r3, 8001bb0 <__sflush_r+0x7c>
 8001bae:	6560      	str	r0, [r4, #84]	; 0x54
 8001bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb2:	602f      	str	r7, [r5, #0]
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	d0ca      	beq.n	8001b4e <__sflush_r+0x1a>
 8001bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	d002      	beq.n	8001bc6 <__sflush_r+0x92>
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f000 f9b1 	bl	8001f28 <_free_r>
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8001bca:	e7c1      	b.n	8001b50 <__sflush_r+0x1c>
 8001bcc:	6a21      	ldr	r1, [r4, #32]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	47b0      	blx	r6
 8001bd4:	1c41      	adds	r1, r0, #1
 8001bd6:	d1c7      	bne.n	8001b68 <__sflush_r+0x34>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0c4      	beq.n	8001b68 <__sflush_r+0x34>
 8001bde:	2b1d      	cmp	r3, #29
 8001be0:	d001      	beq.n	8001be6 <__sflush_r+0xb2>
 8001be2:	2b16      	cmp	r3, #22
 8001be4:	d101      	bne.n	8001bea <__sflush_r+0xb6>
 8001be6:	602f      	str	r7, [r5, #0]
 8001be8:	e7b1      	b.n	8001b4e <__sflush_r+0x1a>
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	81a3      	strh	r3, [r4, #12]
 8001bf2:	e7ad      	b.n	8001b50 <__sflush_r+0x1c>
 8001bf4:	690f      	ldr	r7, [r1, #16]
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d0a9      	beq.n	8001b4e <__sflush_r+0x1a>
 8001bfa:	0793      	lsls	r3, r2, #30
 8001bfc:	680e      	ldr	r6, [r1, #0]
 8001bfe:	bf08      	it	eq
 8001c00:	694b      	ldreq	r3, [r1, #20]
 8001c02:	600f      	str	r7, [r1, #0]
 8001c04:	bf18      	it	ne
 8001c06:	2300      	movne	r3, #0
 8001c08:	eba6 0807 	sub.w	r8, r6, r7
 8001c0c:	608b      	str	r3, [r1, #8]
 8001c0e:	f1b8 0f00 	cmp.w	r8, #0
 8001c12:	dd9c      	ble.n	8001b4e <__sflush_r+0x1a>
 8001c14:	6a21      	ldr	r1, [r4, #32]
 8001c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c18:	4643      	mov	r3, r8
 8001c1a:	463a      	mov	r2, r7
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	47b0      	blx	r6
 8001c20:	2800      	cmp	r0, #0
 8001c22:	dc06      	bgt.n	8001c32 <__sflush_r+0xfe>
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	e78e      	b.n	8001b50 <__sflush_r+0x1c>
 8001c32:	4407      	add	r7, r0
 8001c34:	eba8 0800 	sub.w	r8, r8, r0
 8001c38:	e7e9      	b.n	8001c0e <__sflush_r+0xda>
 8001c3a:	bf00      	nop
 8001c3c:	20400001 	.word	0x20400001

08001c40 <_fflush_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	690b      	ldr	r3, [r1, #16]
 8001c44:	4605      	mov	r5, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	b913      	cbnz	r3, 8001c50 <_fflush_r+0x10>
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	b118      	cbz	r0, 8001c5a <_fflush_r+0x1a>
 8001c52:	6983      	ldr	r3, [r0, #24]
 8001c54:	b90b      	cbnz	r3, 8001c5a <_fflush_r+0x1a>
 8001c56:	f000 f899 	bl	8001d8c <__sinit>
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <_fflush_r+0x6c>)
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	d11b      	bne.n	8001c98 <_fflush_r+0x58>
 8001c60:	686c      	ldr	r4, [r5, #4]
 8001c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0ef      	beq.n	8001c4a <_fflush_r+0xa>
 8001c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c6c:	07d0      	lsls	r0, r2, #31
 8001c6e:	d404      	bmi.n	8001c7a <_fflush_r+0x3a>
 8001c70:	0599      	lsls	r1, r3, #22
 8001c72:	d402      	bmi.n	8001c7a <_fflush_r+0x3a>
 8001c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c76:	f000 f94c 	bl	8001f12 <__retarget_lock_acquire_recursive>
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	f7ff ff59 	bl	8001b34 <__sflush_r>
 8001c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c84:	07da      	lsls	r2, r3, #31
 8001c86:	4605      	mov	r5, r0
 8001c88:	d4e0      	bmi.n	8001c4c <_fflush_r+0xc>
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	059b      	lsls	r3, r3, #22
 8001c8e:	d4dd      	bmi.n	8001c4c <_fflush_r+0xc>
 8001c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c92:	f000 f93f 	bl	8001f14 <__retarget_lock_release_recursive>
 8001c96:	e7d9      	b.n	8001c4c <_fflush_r+0xc>
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <_fflush_r+0x70>)
 8001c9a:	429c      	cmp	r4, r3
 8001c9c:	d101      	bne.n	8001ca2 <_fflush_r+0x62>
 8001c9e:	68ac      	ldr	r4, [r5, #8]
 8001ca0:	e7df      	b.n	8001c62 <_fflush_r+0x22>
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <_fflush_r+0x74>)
 8001ca4:	429c      	cmp	r4, r3
 8001ca6:	bf08      	it	eq
 8001ca8:	68ec      	ldreq	r4, [r5, #12]
 8001caa:	e7da      	b.n	8001c62 <_fflush_r+0x22>
 8001cac:	08002c2c 	.word	0x08002c2c
 8001cb0:	08002c4c 	.word	0x08002c4c
 8001cb4:	08002c0c 	.word	0x08002c0c

08001cb8 <fflush>:
 8001cb8:	4601      	mov	r1, r0
 8001cba:	b920      	cbnz	r0, 8001cc6 <fflush+0xe>
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <fflush+0x18>)
 8001cbe:	4905      	ldr	r1, [pc, #20]	; (8001cd4 <fflush+0x1c>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f000 b8e1 	b.w	8001e88 <_fwalk_reent>
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <fflush+0x20>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f7ff bfb9 	b.w	8001c40 <_fflush_r>
 8001cce:	bf00      	nop
 8001cd0:	08002c6c 	.word	0x08002c6c
 8001cd4:	08001c41 	.word	0x08001c41
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <std>:
 8001cdc:	2300      	movs	r3, #0
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cea:	6083      	str	r3, [r0, #8]
 8001cec:	8181      	strh	r1, [r0, #12]
 8001cee:	6643      	str	r3, [r0, #100]	; 0x64
 8001cf0:	81c2      	strh	r2, [r0, #14]
 8001cf2:	6183      	str	r3, [r0, #24]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	305c      	adds	r0, #92	; 0x5c
 8001cfa:	f000 f90c 	bl	8001f16 <memset>
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <std+0x38>)
 8001d00:	6263      	str	r3, [r4, #36]	; 0x24
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <std+0x3c>)
 8001d04:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <std+0x40>)
 8001d08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <std+0x44>)
 8001d0c:	6224      	str	r4, [r4, #32]
 8001d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	080021b9 	.word	0x080021b9
 8001d18:	080021db 	.word	0x080021db
 8001d1c:	08002213 	.word	0x08002213
 8001d20:	08002237 	.word	0x08002237

08001d24 <_cleanup_r>:
 8001d24:	4901      	ldr	r1, [pc, #4]	; (8001d2c <_cleanup_r+0x8>)
 8001d26:	f000 b8af 	b.w	8001e88 <_fwalk_reent>
 8001d2a:	bf00      	nop
 8001d2c:	08001c41 	.word	0x08001c41

08001d30 <__sfmoreglue>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	1e4a      	subs	r2, r1, #1
 8001d34:	2568      	movs	r5, #104	; 0x68
 8001d36:	4355      	muls	r5, r2
 8001d38:	460e      	mov	r6, r1
 8001d3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d3e:	f000 f943 	bl	8001fc8 <_malloc_r>
 8001d42:	4604      	mov	r4, r0
 8001d44:	b140      	cbz	r0, 8001d58 <__sfmoreglue+0x28>
 8001d46:	2100      	movs	r1, #0
 8001d48:	e9c0 1600 	strd	r1, r6, [r0]
 8001d4c:	300c      	adds	r0, #12
 8001d4e:	60a0      	str	r0, [r4, #8]
 8001d50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d54:	f000 f8df 	bl	8001f16 <memset>
 8001d58:	4620      	mov	r0, r4
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}

08001d5c <__sfp_lock_acquire>:
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <__sfp_lock_acquire+0x8>)
 8001d5e:	f000 b8d8 	b.w	8001f12 <__retarget_lock_acquire_recursive>
 8001d62:	bf00      	nop
 8001d64:	20000124 	.word	0x20000124

08001d68 <__sfp_lock_release>:
 8001d68:	4801      	ldr	r0, [pc, #4]	; (8001d70 <__sfp_lock_release+0x8>)
 8001d6a:	f000 b8d3 	b.w	8001f14 <__retarget_lock_release_recursive>
 8001d6e:	bf00      	nop
 8001d70:	20000124 	.word	0x20000124

08001d74 <__sinit_lock_acquire>:
 8001d74:	4801      	ldr	r0, [pc, #4]	; (8001d7c <__sinit_lock_acquire+0x8>)
 8001d76:	f000 b8cc 	b.w	8001f12 <__retarget_lock_acquire_recursive>
 8001d7a:	bf00      	nop
 8001d7c:	2000011f 	.word	0x2000011f

08001d80 <__sinit_lock_release>:
 8001d80:	4801      	ldr	r0, [pc, #4]	; (8001d88 <__sinit_lock_release+0x8>)
 8001d82:	f000 b8c7 	b.w	8001f14 <__retarget_lock_release_recursive>
 8001d86:	bf00      	nop
 8001d88:	2000011f 	.word	0x2000011f

08001d8c <__sinit>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
 8001d90:	f7ff fff0 	bl	8001d74 <__sinit_lock_acquire>
 8001d94:	69a3      	ldr	r3, [r4, #24]
 8001d96:	b11b      	cbz	r3, 8001da0 <__sinit+0x14>
 8001d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d9c:	f7ff bff0 	b.w	8001d80 <__sinit_lock_release>
 8001da0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001da4:	6523      	str	r3, [r4, #80]	; 0x50
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <__sinit+0x68>)
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <__sinit+0x6c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	bf04      	itt	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	61a3      	streq	r3, [r4, #24]
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 f820 	bl	8001dfc <__sfp>
 8001dbc:	6060      	str	r0, [r4, #4]
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f000 f81c 	bl	8001dfc <__sfp>
 8001dc4:	60a0      	str	r0, [r4, #8]
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f000 f818 	bl	8001dfc <__sfp>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60e0      	str	r0, [r4, #12]
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	6860      	ldr	r0, [r4, #4]
 8001dd4:	f7ff ff82 	bl	8001cdc <std>
 8001dd8:	68a0      	ldr	r0, [r4, #8]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2109      	movs	r1, #9
 8001dde:	f7ff ff7d 	bl	8001cdc <std>
 8001de2:	68e0      	ldr	r0, [r4, #12]
 8001de4:	2202      	movs	r2, #2
 8001de6:	2112      	movs	r1, #18
 8001de8:	f7ff ff78 	bl	8001cdc <std>
 8001dec:	2301      	movs	r3, #1
 8001dee:	61a3      	str	r3, [r4, #24]
 8001df0:	e7d2      	b.n	8001d98 <__sinit+0xc>
 8001df2:	bf00      	nop
 8001df4:	08002c6c 	.word	0x08002c6c
 8001df8:	08001d25 	.word	0x08001d25

08001dfc <__sfp>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	4607      	mov	r7, r0
 8001e00:	f7ff ffac 	bl	8001d5c <__sfp_lock_acquire>
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <__sfp+0x84>)
 8001e06:	681e      	ldr	r6, [r3, #0]
 8001e08:	69b3      	ldr	r3, [r6, #24]
 8001e0a:	b913      	cbnz	r3, 8001e12 <__sfp+0x16>
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f7ff ffbd 	bl	8001d8c <__sinit>
 8001e12:	3648      	adds	r6, #72	; 0x48
 8001e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	d503      	bpl.n	8001e24 <__sfp+0x28>
 8001e1c:	6833      	ldr	r3, [r6, #0]
 8001e1e:	b30b      	cbz	r3, 8001e64 <__sfp+0x68>
 8001e20:	6836      	ldr	r6, [r6, #0]
 8001e22:	e7f7      	b.n	8001e14 <__sfp+0x18>
 8001e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e28:	b9d5      	cbnz	r5, 8001e60 <__sfp+0x64>
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <__sfp+0x88>)
 8001e2c:	60e3      	str	r3, [r4, #12]
 8001e2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e32:	6665      	str	r5, [r4, #100]	; 0x64
 8001e34:	f000 f86c 	bl	8001f10 <__retarget_lock_init_recursive>
 8001e38:	f7ff ff96 	bl	8001d68 <__sfp_lock_release>
 8001e3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e44:	6025      	str	r5, [r4, #0]
 8001e46:	61a5      	str	r5, [r4, #24]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e50:	f000 f861 	bl	8001f16 <memset>
 8001e54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e60:	3468      	adds	r4, #104	; 0x68
 8001e62:	e7d9      	b.n	8001e18 <__sfp+0x1c>
 8001e64:	2104      	movs	r1, #4
 8001e66:	4638      	mov	r0, r7
 8001e68:	f7ff ff62 	bl	8001d30 <__sfmoreglue>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	6030      	str	r0, [r6, #0]
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1d5      	bne.n	8001e20 <__sfp+0x24>
 8001e74:	f7ff ff78 	bl	8001d68 <__sfp_lock_release>
 8001e78:	230c      	movs	r3, #12
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	e7ee      	b.n	8001e5c <__sfp+0x60>
 8001e7e:	bf00      	nop
 8001e80:	08002c6c 	.word	0x08002c6c
 8001e84:	ffff0001 	.word	0xffff0001

08001e88 <_fwalk_reent>:
 8001e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e8c:	4606      	mov	r6, r0
 8001e8e:	4688      	mov	r8, r1
 8001e90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e94:	2700      	movs	r7, #0
 8001e96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e9a:	f1b9 0901 	subs.w	r9, r9, #1
 8001e9e:	d505      	bpl.n	8001eac <_fwalk_reent+0x24>
 8001ea0:	6824      	ldr	r4, [r4, #0]
 8001ea2:	2c00      	cmp	r4, #0
 8001ea4:	d1f7      	bne.n	8001e96 <_fwalk_reent+0xe>
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001eac:	89ab      	ldrh	r3, [r5, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d907      	bls.n	8001ec2 <_fwalk_reent+0x3a>
 8001eb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	d003      	beq.n	8001ec2 <_fwalk_reent+0x3a>
 8001eba:	4629      	mov	r1, r5
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	47c0      	blx	r8
 8001ec0:	4307      	orrs	r7, r0
 8001ec2:	3568      	adds	r5, #104	; 0x68
 8001ec4:	e7e9      	b.n	8001e9a <_fwalk_reent+0x12>
	...

08001ec8 <__libc_init_array>:
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	4d0d      	ldr	r5, [pc, #52]	; (8001f00 <__libc_init_array+0x38>)
 8001ecc:	4c0d      	ldr	r4, [pc, #52]	; (8001f04 <__libc_init_array+0x3c>)
 8001ece:	1b64      	subs	r4, r4, r5
 8001ed0:	10a4      	asrs	r4, r4, #2
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	42a6      	cmp	r6, r4
 8001ed6:	d109      	bne.n	8001eec <__libc_init_array+0x24>
 8001ed8:	4d0b      	ldr	r5, [pc, #44]	; (8001f08 <__libc_init_array+0x40>)
 8001eda:	4c0c      	ldr	r4, [pc, #48]	; (8001f0c <__libc_init_array+0x44>)
 8001edc:	f000 fe64 	bl	8002ba8 <_init>
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	42a6      	cmp	r6, r4
 8001ee8:	d105      	bne.n	8001ef6 <__libc_init_array+0x2e>
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef0:	4798      	blx	r3
 8001ef2:	3601      	adds	r6, #1
 8001ef4:	e7ee      	b.n	8001ed4 <__libc_init_array+0xc>
 8001ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001efa:	4798      	blx	r3
 8001efc:	3601      	adds	r6, #1
 8001efe:	e7f2      	b.n	8001ee6 <__libc_init_array+0x1e>
 8001f00:	08002cac 	.word	0x08002cac
 8001f04:	08002cac 	.word	0x08002cac
 8001f08:	08002cac 	.word	0x08002cac
 8001f0c:	08002cb0 	.word	0x08002cb0

08001f10 <__retarget_lock_init_recursive>:
 8001f10:	4770      	bx	lr

08001f12 <__retarget_lock_acquire_recursive>:
 8001f12:	4770      	bx	lr

08001f14 <__retarget_lock_release_recursive>:
 8001f14:	4770      	bx	lr

08001f16 <memset>:
 8001f16:	4402      	add	r2, r0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d100      	bne.n	8001f20 <memset+0xa>
 8001f1e:	4770      	bx	lr
 8001f20:	f803 1b01 	strb.w	r1, [r3], #1
 8001f24:	e7f9      	b.n	8001f1a <memset+0x4>
	...

08001f28 <_free_r>:
 8001f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f2a:	2900      	cmp	r1, #0
 8001f2c:	d048      	beq.n	8001fc0 <_free_r+0x98>
 8001f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f32:	9001      	str	r0, [sp, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f1a1 0404 	sub.w	r4, r1, #4
 8001f3a:	bfb8      	it	lt
 8001f3c:	18e4      	addlt	r4, r4, r3
 8001f3e:	f000 fad7 	bl	80024f0 <__malloc_lock>
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <_free_r+0x9c>)
 8001f44:	9801      	ldr	r0, [sp, #4]
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	4615      	mov	r5, r2
 8001f4a:	b933      	cbnz	r3, 8001f5a <_free_r+0x32>
 8001f4c:	6063      	str	r3, [r4, #4]
 8001f4e:	6014      	str	r4, [r2, #0]
 8001f50:	b003      	add	sp, #12
 8001f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f56:	f000 bad1 	b.w	80024fc <__malloc_unlock>
 8001f5a:	42a3      	cmp	r3, r4
 8001f5c:	d90b      	bls.n	8001f76 <_free_r+0x4e>
 8001f5e:	6821      	ldr	r1, [r4, #0]
 8001f60:	1862      	adds	r2, r4, r1
 8001f62:	4293      	cmp	r3, r2
 8001f64:	bf04      	itt	eq
 8001f66:	681a      	ldreq	r2, [r3, #0]
 8001f68:	685b      	ldreq	r3, [r3, #4]
 8001f6a:	6063      	str	r3, [r4, #4]
 8001f6c:	bf04      	itt	eq
 8001f6e:	1852      	addeq	r2, r2, r1
 8001f70:	6022      	streq	r2, [r4, #0]
 8001f72:	602c      	str	r4, [r5, #0]
 8001f74:	e7ec      	b.n	8001f50 <_free_r+0x28>
 8001f76:	461a      	mov	r2, r3
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	b10b      	cbz	r3, 8001f80 <_free_r+0x58>
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d9fa      	bls.n	8001f76 <_free_r+0x4e>
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	1855      	adds	r5, r2, r1
 8001f84:	42a5      	cmp	r5, r4
 8001f86:	d10b      	bne.n	8001fa0 <_free_r+0x78>
 8001f88:	6824      	ldr	r4, [r4, #0]
 8001f8a:	4421      	add	r1, r4
 8001f8c:	1854      	adds	r4, r2, r1
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	d1dd      	bne.n	8001f50 <_free_r+0x28>
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	6053      	str	r3, [r2, #4]
 8001f9a:	4421      	add	r1, r4
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	e7d7      	b.n	8001f50 <_free_r+0x28>
 8001fa0:	d902      	bls.n	8001fa8 <_free_r+0x80>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6003      	str	r3, [r0, #0]
 8001fa6:	e7d3      	b.n	8001f50 <_free_r+0x28>
 8001fa8:	6825      	ldr	r5, [r4, #0]
 8001faa:	1961      	adds	r1, r4, r5
 8001fac:	428b      	cmp	r3, r1
 8001fae:	bf04      	itt	eq
 8001fb0:	6819      	ldreq	r1, [r3, #0]
 8001fb2:	685b      	ldreq	r3, [r3, #4]
 8001fb4:	6063      	str	r3, [r4, #4]
 8001fb6:	bf04      	itt	eq
 8001fb8:	1949      	addeq	r1, r1, r5
 8001fba:	6021      	streq	r1, [r4, #0]
 8001fbc:	6054      	str	r4, [r2, #4]
 8001fbe:	e7c7      	b.n	8001f50 <_free_r+0x28>
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd30      	pop	{r4, r5, pc}
 8001fc4:	2000008c 	.word	0x2000008c

08001fc8 <_malloc_r>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	1ccd      	adds	r5, r1, #3
 8001fcc:	f025 0503 	bic.w	r5, r5, #3
 8001fd0:	3508      	adds	r5, #8
 8001fd2:	2d0c      	cmp	r5, #12
 8001fd4:	bf38      	it	cc
 8001fd6:	250c      	movcc	r5, #12
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	4606      	mov	r6, r0
 8001fdc:	db01      	blt.n	8001fe2 <_malloc_r+0x1a>
 8001fde:	42a9      	cmp	r1, r5
 8001fe0:	d903      	bls.n	8001fea <_malloc_r+0x22>
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	6033      	str	r3, [r6, #0]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fea:	f000 fa81 	bl	80024f0 <__malloc_lock>
 8001fee:	4921      	ldr	r1, [pc, #132]	; (8002074 <_malloc_r+0xac>)
 8001ff0:	680a      	ldr	r2, [r1, #0]
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	b99c      	cbnz	r4, 800201e <_malloc_r+0x56>
 8001ff6:	4f20      	ldr	r7, [pc, #128]	; (8002078 <_malloc_r+0xb0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b923      	cbnz	r3, 8002006 <_malloc_r+0x3e>
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	4630      	mov	r0, r6
 8002000:	f000 f8ca 	bl	8002198 <_sbrk_r>
 8002004:	6038      	str	r0, [r7, #0]
 8002006:	4629      	mov	r1, r5
 8002008:	4630      	mov	r0, r6
 800200a:	f000 f8c5 	bl	8002198 <_sbrk_r>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d123      	bne.n	800205a <_malloc_r+0x92>
 8002012:	230c      	movs	r3, #12
 8002014:	6033      	str	r3, [r6, #0]
 8002016:	4630      	mov	r0, r6
 8002018:	f000 fa70 	bl	80024fc <__malloc_unlock>
 800201c:	e7e3      	b.n	8001fe6 <_malloc_r+0x1e>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	1b5b      	subs	r3, r3, r5
 8002022:	d417      	bmi.n	8002054 <_malloc_r+0x8c>
 8002024:	2b0b      	cmp	r3, #11
 8002026:	d903      	bls.n	8002030 <_malloc_r+0x68>
 8002028:	6023      	str	r3, [r4, #0]
 800202a:	441c      	add	r4, r3
 800202c:	6025      	str	r5, [r4, #0]
 800202e:	e004      	b.n	800203a <_malloc_r+0x72>
 8002030:	6863      	ldr	r3, [r4, #4]
 8002032:	42a2      	cmp	r2, r4
 8002034:	bf0c      	ite	eq
 8002036:	600b      	streq	r3, [r1, #0]
 8002038:	6053      	strne	r3, [r2, #4]
 800203a:	4630      	mov	r0, r6
 800203c:	f000 fa5e 	bl	80024fc <__malloc_unlock>
 8002040:	f104 000b 	add.w	r0, r4, #11
 8002044:	1d23      	adds	r3, r4, #4
 8002046:	f020 0007 	bic.w	r0, r0, #7
 800204a:	1ac2      	subs	r2, r0, r3
 800204c:	d0cc      	beq.n	8001fe8 <_malloc_r+0x20>
 800204e:	1a1b      	subs	r3, r3, r0
 8002050:	50a3      	str	r3, [r4, r2]
 8002052:	e7c9      	b.n	8001fe8 <_malloc_r+0x20>
 8002054:	4622      	mov	r2, r4
 8002056:	6864      	ldr	r4, [r4, #4]
 8002058:	e7cc      	b.n	8001ff4 <_malloc_r+0x2c>
 800205a:	1cc4      	adds	r4, r0, #3
 800205c:	f024 0403 	bic.w	r4, r4, #3
 8002060:	42a0      	cmp	r0, r4
 8002062:	d0e3      	beq.n	800202c <_malloc_r+0x64>
 8002064:	1a21      	subs	r1, r4, r0
 8002066:	4630      	mov	r0, r6
 8002068:	f000 f896 	bl	8002198 <_sbrk_r>
 800206c:	3001      	adds	r0, #1
 800206e:	d1dd      	bne.n	800202c <_malloc_r+0x64>
 8002070:	e7cf      	b.n	8002012 <_malloc_r+0x4a>
 8002072:	bf00      	nop
 8002074:	2000008c 	.word	0x2000008c
 8002078:	20000090 	.word	0x20000090

0800207c <iprintf>:
 800207c:	b40f      	push	{r0, r1, r2, r3}
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <iprintf+0x2c>)
 8002080:	b513      	push	{r0, r1, r4, lr}
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	b124      	cbz	r4, 8002090 <iprintf+0x14>
 8002086:	69a3      	ldr	r3, [r4, #24]
 8002088:	b913      	cbnz	r3, 8002090 <iprintf+0x14>
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff fe7e 	bl	8001d8c <__sinit>
 8002090:	ab05      	add	r3, sp, #20
 8002092:	9a04      	ldr	r2, [sp, #16]
 8002094:	68a1      	ldr	r1, [r4, #8]
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	4620      	mov	r0, r4
 800209a:	f000 fa5f 	bl	800255c <_vfiprintf_r>
 800209e:	b002      	add	sp, #8
 80020a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a4:	b004      	add	sp, #16
 80020a6:	4770      	bx	lr
 80020a8:	2000000c 	.word	0x2000000c

080020ac <_puts_r>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	460e      	mov	r6, r1
 80020b0:	4605      	mov	r5, r0
 80020b2:	b118      	cbz	r0, 80020bc <_puts_r+0x10>
 80020b4:	6983      	ldr	r3, [r0, #24]
 80020b6:	b90b      	cbnz	r3, 80020bc <_puts_r+0x10>
 80020b8:	f7ff fe68 	bl	8001d8c <__sinit>
 80020bc:	69ab      	ldr	r3, [r5, #24]
 80020be:	68ac      	ldr	r4, [r5, #8]
 80020c0:	b913      	cbnz	r3, 80020c8 <_puts_r+0x1c>
 80020c2:	4628      	mov	r0, r5
 80020c4:	f7ff fe62 	bl	8001d8c <__sinit>
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <_puts_r+0xd0>)
 80020ca:	429c      	cmp	r4, r3
 80020cc:	d120      	bne.n	8002110 <_puts_r+0x64>
 80020ce:	686c      	ldr	r4, [r5, #4]
 80020d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020d2:	07db      	lsls	r3, r3, #31
 80020d4:	d405      	bmi.n	80020e2 <_puts_r+0x36>
 80020d6:	89a3      	ldrh	r3, [r4, #12]
 80020d8:	0598      	lsls	r0, r3, #22
 80020da:	d402      	bmi.n	80020e2 <_puts_r+0x36>
 80020dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020de:	f7ff ff18 	bl	8001f12 <__retarget_lock_acquire_recursive>
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	0719      	lsls	r1, r3, #28
 80020e6:	d51d      	bpl.n	8002124 <_puts_r+0x78>
 80020e8:	6923      	ldr	r3, [r4, #16]
 80020ea:	b1db      	cbz	r3, 8002124 <_puts_r+0x78>
 80020ec:	3e01      	subs	r6, #1
 80020ee:	68a3      	ldr	r3, [r4, #8]
 80020f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60a3      	str	r3, [r4, #8]
 80020f8:	bb39      	cbnz	r1, 800214a <_puts_r+0x9e>
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da38      	bge.n	8002170 <_puts_r+0xc4>
 80020fe:	4622      	mov	r2, r4
 8002100:	210a      	movs	r1, #10
 8002102:	4628      	mov	r0, r5
 8002104:	f000 f89c 	bl	8002240 <__swbuf_r>
 8002108:	3001      	adds	r0, #1
 800210a:	d011      	beq.n	8002130 <_puts_r+0x84>
 800210c:	250a      	movs	r5, #10
 800210e:	e011      	b.n	8002134 <_puts_r+0x88>
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <_puts_r+0xd4>)
 8002112:	429c      	cmp	r4, r3
 8002114:	d101      	bne.n	800211a <_puts_r+0x6e>
 8002116:	68ac      	ldr	r4, [r5, #8]
 8002118:	e7da      	b.n	80020d0 <_puts_r+0x24>
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <_puts_r+0xd8>)
 800211c:	429c      	cmp	r4, r3
 800211e:	bf08      	it	eq
 8002120:	68ec      	ldreq	r4, [r5, #12]
 8002122:	e7d5      	b.n	80020d0 <_puts_r+0x24>
 8002124:	4621      	mov	r1, r4
 8002126:	4628      	mov	r0, r5
 8002128:	f000 f8ee 	bl	8002308 <__swsetup_r>
 800212c:	2800      	cmp	r0, #0
 800212e:	d0dd      	beq.n	80020ec <_puts_r+0x40>
 8002130:	f04f 35ff 	mov.w	r5, #4294967295
 8002134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002136:	07da      	lsls	r2, r3, #31
 8002138:	d405      	bmi.n	8002146 <_puts_r+0x9a>
 800213a:	89a3      	ldrh	r3, [r4, #12]
 800213c:	059b      	lsls	r3, r3, #22
 800213e:	d402      	bmi.n	8002146 <_puts_r+0x9a>
 8002140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002142:	f7ff fee7 	bl	8001f14 <__retarget_lock_release_recursive>
 8002146:	4628      	mov	r0, r5
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	2b00      	cmp	r3, #0
 800214c:	da04      	bge.n	8002158 <_puts_r+0xac>
 800214e:	69a2      	ldr	r2, [r4, #24]
 8002150:	429a      	cmp	r2, r3
 8002152:	dc06      	bgt.n	8002162 <_puts_r+0xb6>
 8002154:	290a      	cmp	r1, #10
 8002156:	d004      	beq.n	8002162 <_puts_r+0xb6>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	6022      	str	r2, [r4, #0]
 800215e:	7019      	strb	r1, [r3, #0]
 8002160:	e7c5      	b.n	80020ee <_puts_r+0x42>
 8002162:	4622      	mov	r2, r4
 8002164:	4628      	mov	r0, r5
 8002166:	f000 f86b 	bl	8002240 <__swbuf_r>
 800216a:	3001      	adds	r0, #1
 800216c:	d1bf      	bne.n	80020ee <_puts_r+0x42>
 800216e:	e7df      	b.n	8002130 <_puts_r+0x84>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	250a      	movs	r5, #10
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	6022      	str	r2, [r4, #0]
 8002178:	701d      	strb	r5, [r3, #0]
 800217a:	e7db      	b.n	8002134 <_puts_r+0x88>
 800217c:	08002c2c 	.word	0x08002c2c
 8002180:	08002c4c 	.word	0x08002c4c
 8002184:	08002c0c 	.word	0x08002c0c

08002188 <puts>:
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <puts+0xc>)
 800218a:	4601      	mov	r1, r0
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	f7ff bf8d 	b.w	80020ac <_puts_r>
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c

08002198 <_sbrk_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4d06      	ldr	r5, [pc, #24]	; (80021b4 <_sbrk_r+0x1c>)
 800219c:	2300      	movs	r3, #0
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	f000 fcf2 	bl	8002b8c <_sbrk>
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	d102      	bne.n	80021b2 <_sbrk_r+0x1a>
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	b103      	cbz	r3, 80021b2 <_sbrk_r+0x1a>
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	20000128 	.word	0x20000128

080021b8 <__sread>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	460c      	mov	r4, r1
 80021bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c0:	f000 fc90 	bl	8002ae4 <_read_r>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	bfab      	itete	ge
 80021c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ca:	89a3      	ldrhlt	r3, [r4, #12]
 80021cc:	181b      	addge	r3, r3, r0
 80021ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021d2:	bfac      	ite	ge
 80021d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021d6:	81a3      	strhlt	r3, [r4, #12]
 80021d8:	bd10      	pop	{r4, pc}

080021da <__swrite>:
 80021da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021de:	461f      	mov	r7, r3
 80021e0:	898b      	ldrh	r3, [r1, #12]
 80021e2:	05db      	lsls	r3, r3, #23
 80021e4:	4605      	mov	r5, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	4616      	mov	r6, r2
 80021ea:	d505      	bpl.n	80021f8 <__swrite+0x1e>
 80021ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f0:	2302      	movs	r3, #2
 80021f2:	2200      	movs	r2, #0
 80021f4:	f000 f906 	bl	8002404 <_lseek_r>
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002202:	81a3      	strh	r3, [r4, #12]
 8002204:	4632      	mov	r2, r6
 8002206:	463b      	mov	r3, r7
 8002208:	4628      	mov	r0, r5
 800220a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800220e:	f000 b869 	b.w	80022e4 <_write_r>

08002212 <__sseek>:
 8002212:	b510      	push	{r4, lr}
 8002214:	460c      	mov	r4, r1
 8002216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800221a:	f000 f8f3 	bl	8002404 <_lseek_r>
 800221e:	1c43      	adds	r3, r0, #1
 8002220:	89a3      	ldrh	r3, [r4, #12]
 8002222:	bf15      	itete	ne
 8002224:	6560      	strne	r0, [r4, #84]	; 0x54
 8002226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800222a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800222e:	81a3      	strheq	r3, [r4, #12]
 8002230:	bf18      	it	ne
 8002232:	81a3      	strhne	r3, [r4, #12]
 8002234:	bd10      	pop	{r4, pc}

08002236 <__sclose>:
 8002236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223a:	f000 b8d3 	b.w	80023e4 <_close_r>
	...

08002240 <__swbuf_r>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	460e      	mov	r6, r1
 8002244:	4614      	mov	r4, r2
 8002246:	4605      	mov	r5, r0
 8002248:	b118      	cbz	r0, 8002252 <__swbuf_r+0x12>
 800224a:	6983      	ldr	r3, [r0, #24]
 800224c:	b90b      	cbnz	r3, 8002252 <__swbuf_r+0x12>
 800224e:	f7ff fd9d 	bl	8001d8c <__sinit>
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <__swbuf_r+0x98>)
 8002254:	429c      	cmp	r4, r3
 8002256:	d12b      	bne.n	80022b0 <__swbuf_r+0x70>
 8002258:	686c      	ldr	r4, [r5, #4]
 800225a:	69a3      	ldr	r3, [r4, #24]
 800225c:	60a3      	str	r3, [r4, #8]
 800225e:	89a3      	ldrh	r3, [r4, #12]
 8002260:	071a      	lsls	r2, r3, #28
 8002262:	d52f      	bpl.n	80022c4 <__swbuf_r+0x84>
 8002264:	6923      	ldr	r3, [r4, #16]
 8002266:	b36b      	cbz	r3, 80022c4 <__swbuf_r+0x84>
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	1ac0      	subs	r0, r0, r3
 800226e:	6963      	ldr	r3, [r4, #20]
 8002270:	b2f6      	uxtb	r6, r6
 8002272:	4283      	cmp	r3, r0
 8002274:	4637      	mov	r7, r6
 8002276:	dc04      	bgt.n	8002282 <__swbuf_r+0x42>
 8002278:	4621      	mov	r1, r4
 800227a:	4628      	mov	r0, r5
 800227c:	f7ff fce0 	bl	8001c40 <_fflush_r>
 8002280:	bb30      	cbnz	r0, 80022d0 <__swbuf_r+0x90>
 8002282:	68a3      	ldr	r3, [r4, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60a3      	str	r3, [r4, #8]
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	6022      	str	r2, [r4, #0]
 800228e:	701e      	strb	r6, [r3, #0]
 8002290:	6963      	ldr	r3, [r4, #20]
 8002292:	3001      	adds	r0, #1
 8002294:	4283      	cmp	r3, r0
 8002296:	d004      	beq.n	80022a2 <__swbuf_r+0x62>
 8002298:	89a3      	ldrh	r3, [r4, #12]
 800229a:	07db      	lsls	r3, r3, #31
 800229c:	d506      	bpl.n	80022ac <__swbuf_r+0x6c>
 800229e:	2e0a      	cmp	r6, #10
 80022a0:	d104      	bne.n	80022ac <__swbuf_r+0x6c>
 80022a2:	4621      	mov	r1, r4
 80022a4:	4628      	mov	r0, r5
 80022a6:	f7ff fccb 	bl	8001c40 <_fflush_r>
 80022aa:	b988      	cbnz	r0, 80022d0 <__swbuf_r+0x90>
 80022ac:	4638      	mov	r0, r7
 80022ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <__swbuf_r+0x9c>)
 80022b2:	429c      	cmp	r4, r3
 80022b4:	d101      	bne.n	80022ba <__swbuf_r+0x7a>
 80022b6:	68ac      	ldr	r4, [r5, #8]
 80022b8:	e7cf      	b.n	800225a <__swbuf_r+0x1a>
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <__swbuf_r+0xa0>)
 80022bc:	429c      	cmp	r4, r3
 80022be:	bf08      	it	eq
 80022c0:	68ec      	ldreq	r4, [r5, #12]
 80022c2:	e7ca      	b.n	800225a <__swbuf_r+0x1a>
 80022c4:	4621      	mov	r1, r4
 80022c6:	4628      	mov	r0, r5
 80022c8:	f000 f81e 	bl	8002308 <__swsetup_r>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d0cb      	beq.n	8002268 <__swbuf_r+0x28>
 80022d0:	f04f 37ff 	mov.w	r7, #4294967295
 80022d4:	e7ea      	b.n	80022ac <__swbuf_r+0x6c>
 80022d6:	bf00      	nop
 80022d8:	08002c2c 	.word	0x08002c2c
 80022dc:	08002c4c 	.word	0x08002c4c
 80022e0:	08002c0c 	.word	0x08002c0c

080022e4 <_write_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4d07      	ldr	r5, [pc, #28]	; (8002304 <_write_r+0x20>)
 80022e8:	4604      	mov	r4, r0
 80022ea:	4608      	mov	r0, r1
 80022ec:	4611      	mov	r1, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	602a      	str	r2, [r5, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f7fe faba 	bl	800086c <_write>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_write_r+0x1e>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_write_r+0x1e>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000128 	.word	0x20000128

08002308 <__swsetup_r>:
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <__swsetup_r+0xcc>)
 800230a:	b570      	push	{r4, r5, r6, lr}
 800230c:	681d      	ldr	r5, [r3, #0]
 800230e:	4606      	mov	r6, r0
 8002310:	460c      	mov	r4, r1
 8002312:	b125      	cbz	r5, 800231e <__swsetup_r+0x16>
 8002314:	69ab      	ldr	r3, [r5, #24]
 8002316:	b913      	cbnz	r3, 800231e <__swsetup_r+0x16>
 8002318:	4628      	mov	r0, r5
 800231a:	f7ff fd37 	bl	8001d8c <__sinit>
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <__swsetup_r+0xd0>)
 8002320:	429c      	cmp	r4, r3
 8002322:	d10f      	bne.n	8002344 <__swsetup_r+0x3c>
 8002324:	686c      	ldr	r4, [r5, #4]
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800232c:	0719      	lsls	r1, r3, #28
 800232e:	d42c      	bmi.n	800238a <__swsetup_r+0x82>
 8002330:	06dd      	lsls	r5, r3, #27
 8002332:	d411      	bmi.n	8002358 <__swsetup_r+0x50>
 8002334:	2309      	movs	r3, #9
 8002336:	6033      	str	r3, [r6, #0]
 8002338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800233c:	81a3      	strh	r3, [r4, #12]
 800233e:	f04f 30ff 	mov.w	r0, #4294967295
 8002342:	e03e      	b.n	80023c2 <__swsetup_r+0xba>
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <__swsetup_r+0xd4>)
 8002346:	429c      	cmp	r4, r3
 8002348:	d101      	bne.n	800234e <__swsetup_r+0x46>
 800234a:	68ac      	ldr	r4, [r5, #8]
 800234c:	e7eb      	b.n	8002326 <__swsetup_r+0x1e>
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <__swsetup_r+0xd8>)
 8002350:	429c      	cmp	r4, r3
 8002352:	bf08      	it	eq
 8002354:	68ec      	ldreq	r4, [r5, #12]
 8002356:	e7e6      	b.n	8002326 <__swsetup_r+0x1e>
 8002358:	0758      	lsls	r0, r3, #29
 800235a:	d512      	bpl.n	8002382 <__swsetup_r+0x7a>
 800235c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800235e:	b141      	cbz	r1, 8002372 <__swsetup_r+0x6a>
 8002360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002364:	4299      	cmp	r1, r3
 8002366:	d002      	beq.n	800236e <__swsetup_r+0x66>
 8002368:	4630      	mov	r0, r6
 800236a:	f7ff fddd 	bl	8001f28 <_free_r>
 800236e:	2300      	movs	r3, #0
 8002370:	6363      	str	r3, [r4, #52]	; 0x34
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002378:	81a3      	strh	r3, [r4, #12]
 800237a:	2300      	movs	r3, #0
 800237c:	6063      	str	r3, [r4, #4]
 800237e:	6923      	ldr	r3, [r4, #16]
 8002380:	6023      	str	r3, [r4, #0]
 8002382:	89a3      	ldrh	r3, [r4, #12]
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	81a3      	strh	r3, [r4, #12]
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	b94b      	cbnz	r3, 80023a2 <__swsetup_r+0x9a>
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002398:	d003      	beq.n	80023a2 <__swsetup_r+0x9a>
 800239a:	4621      	mov	r1, r4
 800239c:	4630      	mov	r0, r6
 800239e:	f000 f867 	bl	8002470 <__smakebuf_r>
 80023a2:	89a0      	ldrh	r0, [r4, #12]
 80023a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023a8:	f010 0301 	ands.w	r3, r0, #1
 80023ac:	d00a      	beq.n	80023c4 <__swsetup_r+0xbc>
 80023ae:	2300      	movs	r3, #0
 80023b0:	60a3      	str	r3, [r4, #8]
 80023b2:	6963      	ldr	r3, [r4, #20]
 80023b4:	425b      	negs	r3, r3
 80023b6:	61a3      	str	r3, [r4, #24]
 80023b8:	6923      	ldr	r3, [r4, #16]
 80023ba:	b943      	cbnz	r3, 80023ce <__swsetup_r+0xc6>
 80023bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023c0:	d1ba      	bne.n	8002338 <__swsetup_r+0x30>
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	0781      	lsls	r1, r0, #30
 80023c6:	bf58      	it	pl
 80023c8:	6963      	ldrpl	r3, [r4, #20]
 80023ca:	60a3      	str	r3, [r4, #8]
 80023cc:	e7f4      	b.n	80023b8 <__swsetup_r+0xb0>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e7f7      	b.n	80023c2 <__swsetup_r+0xba>
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	08002c2c 	.word	0x08002c2c
 80023dc:	08002c4c 	.word	0x08002c4c
 80023e0:	08002c0c 	.word	0x08002c0c

080023e4 <_close_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	4d06      	ldr	r5, [pc, #24]	; (8002400 <_close_r+0x1c>)
 80023e8:	2300      	movs	r3, #0
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	602b      	str	r3, [r5, #0]
 80023f0:	f000 fbac 	bl	8002b4c <_close>
 80023f4:	1c43      	adds	r3, r0, #1
 80023f6:	d102      	bne.n	80023fe <_close_r+0x1a>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	b103      	cbz	r3, 80023fe <_close_r+0x1a>
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	20000128 	.word	0x20000128

08002404 <_lseek_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	4d07      	ldr	r5, [pc, #28]	; (8002424 <_lseek_r+0x20>)
 8002408:	4604      	mov	r4, r0
 800240a:	4608      	mov	r0, r1
 800240c:	4611      	mov	r1, r2
 800240e:	2200      	movs	r2, #0
 8002410:	602a      	str	r2, [r5, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 fbb2 	bl	8002b7c <_lseek>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_lseek_r+0x1e>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_lseek_r+0x1e>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	20000128 	.word	0x20000128

08002428 <__swhatbuf_r>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	460e      	mov	r6, r1
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	2900      	cmp	r1, #0
 8002432:	b096      	sub	sp, #88	; 0x58
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	da07      	bge.n	800244a <__swhatbuf_r+0x22>
 800243a:	2300      	movs	r3, #0
 800243c:	602b      	str	r3, [r5, #0]
 800243e:	89b3      	ldrh	r3, [r6, #12]
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	d410      	bmi.n	8002466 <__swhatbuf_r+0x3e>
 8002444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002448:	e00e      	b.n	8002468 <__swhatbuf_r+0x40>
 800244a:	466a      	mov	r2, sp
 800244c:	f000 fb5c 	bl	8002b08 <_fstat_r>
 8002450:	2800      	cmp	r0, #0
 8002452:	dbf2      	blt.n	800243a <__swhatbuf_r+0x12>
 8002454:	9a01      	ldr	r2, [sp, #4]
 8002456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800245a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800245e:	425a      	negs	r2, r3
 8002460:	415a      	adcs	r2, r3
 8002462:	602a      	str	r2, [r5, #0]
 8002464:	e7ee      	b.n	8002444 <__swhatbuf_r+0x1c>
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	2000      	movs	r0, #0
 800246a:	6023      	str	r3, [r4, #0]
 800246c:	b016      	add	sp, #88	; 0x58
 800246e:	bd70      	pop	{r4, r5, r6, pc}

08002470 <__smakebuf_r>:
 8002470:	898b      	ldrh	r3, [r1, #12]
 8002472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002474:	079d      	lsls	r5, r3, #30
 8002476:	4606      	mov	r6, r0
 8002478:	460c      	mov	r4, r1
 800247a:	d507      	bpl.n	800248c <__smakebuf_r+0x1c>
 800247c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	6123      	str	r3, [r4, #16]
 8002484:	2301      	movs	r3, #1
 8002486:	6163      	str	r3, [r4, #20]
 8002488:	b002      	add	sp, #8
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	ab01      	add	r3, sp, #4
 800248e:	466a      	mov	r2, sp
 8002490:	f7ff ffca 	bl	8002428 <__swhatbuf_r>
 8002494:	9900      	ldr	r1, [sp, #0]
 8002496:	4605      	mov	r5, r0
 8002498:	4630      	mov	r0, r6
 800249a:	f7ff fd95 	bl	8001fc8 <_malloc_r>
 800249e:	b948      	cbnz	r0, 80024b4 <__smakebuf_r+0x44>
 80024a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024a4:	059a      	lsls	r2, r3, #22
 80024a6:	d4ef      	bmi.n	8002488 <__smakebuf_r+0x18>
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	81a3      	strh	r3, [r4, #12]
 80024b2:	e7e3      	b.n	800247c <__smakebuf_r+0xc>
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <__smakebuf_r+0x7c>)
 80024b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	6020      	str	r0, [r4, #0]
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	81a3      	strh	r3, [r4, #12]
 80024c2:	9b00      	ldr	r3, [sp, #0]
 80024c4:	6163      	str	r3, [r4, #20]
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	6120      	str	r0, [r4, #16]
 80024ca:	b15b      	cbz	r3, 80024e4 <__smakebuf_r+0x74>
 80024cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024d0:	4630      	mov	r0, r6
 80024d2:	f000 fb2b 	bl	8002b2c <_isatty_r>
 80024d6:	b128      	cbz	r0, 80024e4 <__smakebuf_r+0x74>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	89a0      	ldrh	r0, [r4, #12]
 80024e6:	4305      	orrs	r5, r0
 80024e8:	81a5      	strh	r5, [r4, #12]
 80024ea:	e7cd      	b.n	8002488 <__smakebuf_r+0x18>
 80024ec:	08001d25 	.word	0x08001d25

080024f0 <__malloc_lock>:
 80024f0:	4801      	ldr	r0, [pc, #4]	; (80024f8 <__malloc_lock+0x8>)
 80024f2:	f7ff bd0e 	b.w	8001f12 <__retarget_lock_acquire_recursive>
 80024f6:	bf00      	nop
 80024f8:	20000120 	.word	0x20000120

080024fc <__malloc_unlock>:
 80024fc:	4801      	ldr	r0, [pc, #4]	; (8002504 <__malloc_unlock+0x8>)
 80024fe:	f7ff bd09 	b.w	8001f14 <__retarget_lock_release_recursive>
 8002502:	bf00      	nop
 8002504:	20000120 	.word	0x20000120

08002508 <__sfputc_r>:
 8002508:	6893      	ldr	r3, [r2, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	b410      	push	{r4}
 8002510:	6093      	str	r3, [r2, #8]
 8002512:	da08      	bge.n	8002526 <__sfputc_r+0x1e>
 8002514:	6994      	ldr	r4, [r2, #24]
 8002516:	42a3      	cmp	r3, r4
 8002518:	db01      	blt.n	800251e <__sfputc_r+0x16>
 800251a:	290a      	cmp	r1, #10
 800251c:	d103      	bne.n	8002526 <__sfputc_r+0x1e>
 800251e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002522:	f7ff be8d 	b.w	8002240 <__swbuf_r>
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	1c58      	adds	r0, r3, #1
 800252a:	6010      	str	r0, [r2, #0]
 800252c:	7019      	strb	r1, [r3, #0]
 800252e:	4608      	mov	r0, r1
 8002530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002534:	4770      	bx	lr

08002536 <__sfputs_r>:
 8002536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002538:	4606      	mov	r6, r0
 800253a:	460f      	mov	r7, r1
 800253c:	4614      	mov	r4, r2
 800253e:	18d5      	adds	r5, r2, r3
 8002540:	42ac      	cmp	r4, r5
 8002542:	d101      	bne.n	8002548 <__sfputs_r+0x12>
 8002544:	2000      	movs	r0, #0
 8002546:	e007      	b.n	8002558 <__sfputs_r+0x22>
 8002548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800254c:	463a      	mov	r2, r7
 800254e:	4630      	mov	r0, r6
 8002550:	f7ff ffda 	bl	8002508 <__sfputc_r>
 8002554:	1c43      	adds	r3, r0, #1
 8002556:	d1f3      	bne.n	8002540 <__sfputs_r+0xa>
 8002558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800255c <_vfiprintf_r>:
 800255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	460d      	mov	r5, r1
 8002562:	b09d      	sub	sp, #116	; 0x74
 8002564:	4614      	mov	r4, r2
 8002566:	4698      	mov	r8, r3
 8002568:	4606      	mov	r6, r0
 800256a:	b118      	cbz	r0, 8002574 <_vfiprintf_r+0x18>
 800256c:	6983      	ldr	r3, [r0, #24]
 800256e:	b90b      	cbnz	r3, 8002574 <_vfiprintf_r+0x18>
 8002570:	f7ff fc0c 	bl	8001d8c <__sinit>
 8002574:	4b89      	ldr	r3, [pc, #548]	; (800279c <_vfiprintf_r+0x240>)
 8002576:	429d      	cmp	r5, r3
 8002578:	d11b      	bne.n	80025b2 <_vfiprintf_r+0x56>
 800257a:	6875      	ldr	r5, [r6, #4]
 800257c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800257e:	07d9      	lsls	r1, r3, #31
 8002580:	d405      	bmi.n	800258e <_vfiprintf_r+0x32>
 8002582:	89ab      	ldrh	r3, [r5, #12]
 8002584:	059a      	lsls	r2, r3, #22
 8002586:	d402      	bmi.n	800258e <_vfiprintf_r+0x32>
 8002588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800258a:	f7ff fcc2 	bl	8001f12 <__retarget_lock_acquire_recursive>
 800258e:	89ab      	ldrh	r3, [r5, #12]
 8002590:	071b      	lsls	r3, r3, #28
 8002592:	d501      	bpl.n	8002598 <_vfiprintf_r+0x3c>
 8002594:	692b      	ldr	r3, [r5, #16]
 8002596:	b9eb      	cbnz	r3, 80025d4 <_vfiprintf_r+0x78>
 8002598:	4629      	mov	r1, r5
 800259a:	4630      	mov	r0, r6
 800259c:	f7ff feb4 	bl	8002308 <__swsetup_r>
 80025a0:	b1c0      	cbz	r0, 80025d4 <_vfiprintf_r+0x78>
 80025a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025a4:	07dc      	lsls	r4, r3, #31
 80025a6:	d50e      	bpl.n	80025c6 <_vfiprintf_r+0x6a>
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	b01d      	add	sp, #116	; 0x74
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b2:	4b7b      	ldr	r3, [pc, #492]	; (80027a0 <_vfiprintf_r+0x244>)
 80025b4:	429d      	cmp	r5, r3
 80025b6:	d101      	bne.n	80025bc <_vfiprintf_r+0x60>
 80025b8:	68b5      	ldr	r5, [r6, #8]
 80025ba:	e7df      	b.n	800257c <_vfiprintf_r+0x20>
 80025bc:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <_vfiprintf_r+0x248>)
 80025be:	429d      	cmp	r5, r3
 80025c0:	bf08      	it	eq
 80025c2:	68f5      	ldreq	r5, [r6, #12]
 80025c4:	e7da      	b.n	800257c <_vfiprintf_r+0x20>
 80025c6:	89ab      	ldrh	r3, [r5, #12]
 80025c8:	0598      	lsls	r0, r3, #22
 80025ca:	d4ed      	bmi.n	80025a8 <_vfiprintf_r+0x4c>
 80025cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025ce:	f7ff fca1 	bl	8001f14 <__retarget_lock_release_recursive>
 80025d2:	e7e9      	b.n	80025a8 <_vfiprintf_r+0x4c>
 80025d4:	2300      	movs	r3, #0
 80025d6:	9309      	str	r3, [sp, #36]	; 0x24
 80025d8:	2320      	movs	r3, #32
 80025da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025de:	f8cd 800c 	str.w	r8, [sp, #12]
 80025e2:	2330      	movs	r3, #48	; 0x30
 80025e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80027a8 <_vfiprintf_r+0x24c>
 80025e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025ec:	f04f 0901 	mov.w	r9, #1
 80025f0:	4623      	mov	r3, r4
 80025f2:	469a      	mov	sl, r3
 80025f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025f8:	b10a      	cbz	r2, 80025fe <_vfiprintf_r+0xa2>
 80025fa:	2a25      	cmp	r2, #37	; 0x25
 80025fc:	d1f9      	bne.n	80025f2 <_vfiprintf_r+0x96>
 80025fe:	ebba 0b04 	subs.w	fp, sl, r4
 8002602:	d00b      	beq.n	800261c <_vfiprintf_r+0xc0>
 8002604:	465b      	mov	r3, fp
 8002606:	4622      	mov	r2, r4
 8002608:	4629      	mov	r1, r5
 800260a:	4630      	mov	r0, r6
 800260c:	f7ff ff93 	bl	8002536 <__sfputs_r>
 8002610:	3001      	adds	r0, #1
 8002612:	f000 80aa 	beq.w	800276a <_vfiprintf_r+0x20e>
 8002616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002618:	445a      	add	r2, fp
 800261a:	9209      	str	r2, [sp, #36]	; 0x24
 800261c:	f89a 3000 	ldrb.w	r3, [sl]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a2 	beq.w	800276a <_vfiprintf_r+0x20e>
 8002626:	2300      	movs	r3, #0
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002630:	f10a 0a01 	add.w	sl, sl, #1
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	9307      	str	r3, [sp, #28]
 8002638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800263c:	931a      	str	r3, [sp, #104]	; 0x68
 800263e:	4654      	mov	r4, sl
 8002640:	2205      	movs	r2, #5
 8002642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002646:	4858      	ldr	r0, [pc, #352]	; (80027a8 <_vfiprintf_r+0x24c>)
 8002648:	f7fd fdfa 	bl	8000240 <memchr>
 800264c:	9a04      	ldr	r2, [sp, #16]
 800264e:	b9d8      	cbnz	r0, 8002688 <_vfiprintf_r+0x12c>
 8002650:	06d1      	lsls	r1, r2, #27
 8002652:	bf44      	itt	mi
 8002654:	2320      	movmi	r3, #32
 8002656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800265a:	0713      	lsls	r3, r2, #28
 800265c:	bf44      	itt	mi
 800265e:	232b      	movmi	r3, #43	; 0x2b
 8002660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002664:	f89a 3000 	ldrb.w	r3, [sl]
 8002668:	2b2a      	cmp	r3, #42	; 0x2a
 800266a:	d015      	beq.n	8002698 <_vfiprintf_r+0x13c>
 800266c:	9a07      	ldr	r2, [sp, #28]
 800266e:	4654      	mov	r4, sl
 8002670:	2000      	movs	r0, #0
 8002672:	f04f 0c0a 	mov.w	ip, #10
 8002676:	4621      	mov	r1, r4
 8002678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800267c:	3b30      	subs	r3, #48	; 0x30
 800267e:	2b09      	cmp	r3, #9
 8002680:	d94e      	bls.n	8002720 <_vfiprintf_r+0x1c4>
 8002682:	b1b0      	cbz	r0, 80026b2 <_vfiprintf_r+0x156>
 8002684:	9207      	str	r2, [sp, #28]
 8002686:	e014      	b.n	80026b2 <_vfiprintf_r+0x156>
 8002688:	eba0 0308 	sub.w	r3, r0, r8
 800268c:	fa09 f303 	lsl.w	r3, r9, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	9304      	str	r3, [sp, #16]
 8002694:	46a2      	mov	sl, r4
 8002696:	e7d2      	b.n	800263e <_vfiprintf_r+0xe2>
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	1d19      	adds	r1, r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	9103      	str	r1, [sp, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bfbb      	ittet	lt
 80026a4:	425b      	neglt	r3, r3
 80026a6:	f042 0202 	orrlt.w	r2, r2, #2
 80026aa:	9307      	strge	r3, [sp, #28]
 80026ac:	9307      	strlt	r3, [sp, #28]
 80026ae:	bfb8      	it	lt
 80026b0:	9204      	strlt	r2, [sp, #16]
 80026b2:	7823      	ldrb	r3, [r4, #0]
 80026b4:	2b2e      	cmp	r3, #46	; 0x2e
 80026b6:	d10c      	bne.n	80026d2 <_vfiprintf_r+0x176>
 80026b8:	7863      	ldrb	r3, [r4, #1]
 80026ba:	2b2a      	cmp	r3, #42	; 0x2a
 80026bc:	d135      	bne.n	800272a <_vfiprintf_r+0x1ce>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	1d1a      	adds	r2, r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	9203      	str	r2, [sp, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfb8      	it	lt
 80026ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80026ce:	3402      	adds	r4, #2
 80026d0:	9305      	str	r3, [sp, #20]
 80026d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80027b8 <_vfiprintf_r+0x25c>
 80026d6:	7821      	ldrb	r1, [r4, #0]
 80026d8:	2203      	movs	r2, #3
 80026da:	4650      	mov	r0, sl
 80026dc:	f7fd fdb0 	bl	8000240 <memchr>
 80026e0:	b140      	cbz	r0, 80026f4 <_vfiprintf_r+0x198>
 80026e2:	2340      	movs	r3, #64	; 0x40
 80026e4:	eba0 000a 	sub.w	r0, r0, sl
 80026e8:	fa03 f000 	lsl.w	r0, r3, r0
 80026ec:	9b04      	ldr	r3, [sp, #16]
 80026ee:	4303      	orrs	r3, r0
 80026f0:	3401      	adds	r4, #1
 80026f2:	9304      	str	r3, [sp, #16]
 80026f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026f8:	482c      	ldr	r0, [pc, #176]	; (80027ac <_vfiprintf_r+0x250>)
 80026fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026fe:	2206      	movs	r2, #6
 8002700:	f7fd fd9e 	bl	8000240 <memchr>
 8002704:	2800      	cmp	r0, #0
 8002706:	d03f      	beq.n	8002788 <_vfiprintf_r+0x22c>
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <_vfiprintf_r+0x254>)
 800270a:	bb1b      	cbnz	r3, 8002754 <_vfiprintf_r+0x1f8>
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	3307      	adds	r3, #7
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	3308      	adds	r3, #8
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800271a:	443b      	add	r3, r7
 800271c:	9309      	str	r3, [sp, #36]	; 0x24
 800271e:	e767      	b.n	80025f0 <_vfiprintf_r+0x94>
 8002720:	fb0c 3202 	mla	r2, ip, r2, r3
 8002724:	460c      	mov	r4, r1
 8002726:	2001      	movs	r0, #1
 8002728:	e7a5      	b.n	8002676 <_vfiprintf_r+0x11a>
 800272a:	2300      	movs	r3, #0
 800272c:	3401      	adds	r4, #1
 800272e:	9305      	str	r3, [sp, #20]
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 0c0a 	mov.w	ip, #10
 8002736:	4620      	mov	r0, r4
 8002738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800273c:	3a30      	subs	r2, #48	; 0x30
 800273e:	2a09      	cmp	r2, #9
 8002740:	d903      	bls.n	800274a <_vfiprintf_r+0x1ee>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0c5      	beq.n	80026d2 <_vfiprintf_r+0x176>
 8002746:	9105      	str	r1, [sp, #20]
 8002748:	e7c3      	b.n	80026d2 <_vfiprintf_r+0x176>
 800274a:	fb0c 2101 	mla	r1, ip, r1, r2
 800274e:	4604      	mov	r4, r0
 8002750:	2301      	movs	r3, #1
 8002752:	e7f0      	b.n	8002736 <_vfiprintf_r+0x1da>
 8002754:	ab03      	add	r3, sp, #12
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	462a      	mov	r2, r5
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <_vfiprintf_r+0x258>)
 800275c:	a904      	add	r1, sp, #16
 800275e:	4630      	mov	r0, r6
 8002760:	f3af 8000 	nop.w
 8002764:	4607      	mov	r7, r0
 8002766:	1c78      	adds	r0, r7, #1
 8002768:	d1d6      	bne.n	8002718 <_vfiprintf_r+0x1bc>
 800276a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800276c:	07d9      	lsls	r1, r3, #31
 800276e:	d405      	bmi.n	800277c <_vfiprintf_r+0x220>
 8002770:	89ab      	ldrh	r3, [r5, #12]
 8002772:	059a      	lsls	r2, r3, #22
 8002774:	d402      	bmi.n	800277c <_vfiprintf_r+0x220>
 8002776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002778:	f7ff fbcc 	bl	8001f14 <__retarget_lock_release_recursive>
 800277c:	89ab      	ldrh	r3, [r5, #12]
 800277e:	065b      	lsls	r3, r3, #25
 8002780:	f53f af12 	bmi.w	80025a8 <_vfiprintf_r+0x4c>
 8002784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002786:	e711      	b.n	80025ac <_vfiprintf_r+0x50>
 8002788:	ab03      	add	r3, sp, #12
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	462a      	mov	r2, r5
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <_vfiprintf_r+0x258>)
 8002790:	a904      	add	r1, sp, #16
 8002792:	4630      	mov	r0, r6
 8002794:	f000 f880 	bl	8002898 <_printf_i>
 8002798:	e7e4      	b.n	8002764 <_vfiprintf_r+0x208>
 800279a:	bf00      	nop
 800279c:	08002c2c 	.word	0x08002c2c
 80027a0:	08002c4c 	.word	0x08002c4c
 80027a4:	08002c0c 	.word	0x08002c0c
 80027a8:	08002c70 	.word	0x08002c70
 80027ac:	08002c7a 	.word	0x08002c7a
 80027b0:	00000000 	.word	0x00000000
 80027b4:	08002537 	.word	0x08002537
 80027b8:	08002c76 	.word	0x08002c76

080027bc <_printf_common>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	4616      	mov	r6, r2
 80027c2:	4699      	mov	r9, r3
 80027c4:	688a      	ldr	r2, [r1, #8]
 80027c6:	690b      	ldr	r3, [r1, #16]
 80027c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bfb8      	it	lt
 80027d0:	4613      	movlt	r3, r2
 80027d2:	6033      	str	r3, [r6, #0]
 80027d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027d8:	4607      	mov	r7, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	b10a      	cbz	r2, 80027e2 <_printf_common+0x26>
 80027de:	3301      	adds	r3, #1
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	0699      	lsls	r1, r3, #26
 80027e6:	bf42      	ittt	mi
 80027e8:	6833      	ldrmi	r3, [r6, #0]
 80027ea:	3302      	addmi	r3, #2
 80027ec:	6033      	strmi	r3, [r6, #0]
 80027ee:	6825      	ldr	r5, [r4, #0]
 80027f0:	f015 0506 	ands.w	r5, r5, #6
 80027f4:	d106      	bne.n	8002804 <_printf_common+0x48>
 80027f6:	f104 0a19 	add.w	sl, r4, #25
 80027fa:	68e3      	ldr	r3, [r4, #12]
 80027fc:	6832      	ldr	r2, [r6, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	42ab      	cmp	r3, r5
 8002802:	dc26      	bgt.n	8002852 <_printf_common+0x96>
 8002804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002808:	1e13      	subs	r3, r2, #0
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	bf18      	it	ne
 800280e:	2301      	movne	r3, #1
 8002810:	0692      	lsls	r2, r2, #26
 8002812:	d42b      	bmi.n	800286c <_printf_common+0xb0>
 8002814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002818:	4649      	mov	r1, r9
 800281a:	4638      	mov	r0, r7
 800281c:	47c0      	blx	r8
 800281e:	3001      	adds	r0, #1
 8002820:	d01e      	beq.n	8002860 <_printf_common+0xa4>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	68e5      	ldr	r5, [r4, #12]
 8002826:	6832      	ldr	r2, [r6, #0]
 8002828:	f003 0306 	and.w	r3, r3, #6
 800282c:	2b04      	cmp	r3, #4
 800282e:	bf08      	it	eq
 8002830:	1aad      	subeq	r5, r5, r2
 8002832:	68a3      	ldr	r3, [r4, #8]
 8002834:	6922      	ldr	r2, [r4, #16]
 8002836:	bf0c      	ite	eq
 8002838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800283c:	2500      	movne	r5, #0
 800283e:	4293      	cmp	r3, r2
 8002840:	bfc4      	itt	gt
 8002842:	1a9b      	subgt	r3, r3, r2
 8002844:	18ed      	addgt	r5, r5, r3
 8002846:	2600      	movs	r6, #0
 8002848:	341a      	adds	r4, #26
 800284a:	42b5      	cmp	r5, r6
 800284c:	d11a      	bne.n	8002884 <_printf_common+0xc8>
 800284e:	2000      	movs	r0, #0
 8002850:	e008      	b.n	8002864 <_printf_common+0xa8>
 8002852:	2301      	movs	r3, #1
 8002854:	4652      	mov	r2, sl
 8002856:	4649      	mov	r1, r9
 8002858:	4638      	mov	r0, r7
 800285a:	47c0      	blx	r8
 800285c:	3001      	adds	r0, #1
 800285e:	d103      	bne.n	8002868 <_printf_common+0xac>
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002868:	3501      	adds	r5, #1
 800286a:	e7c6      	b.n	80027fa <_printf_common+0x3e>
 800286c:	18e1      	adds	r1, r4, r3
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	2030      	movs	r0, #48	; 0x30
 8002872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002876:	4422      	add	r2, r4
 8002878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800287c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002880:	3302      	adds	r3, #2
 8002882:	e7c7      	b.n	8002814 <_printf_common+0x58>
 8002884:	2301      	movs	r3, #1
 8002886:	4622      	mov	r2, r4
 8002888:	4649      	mov	r1, r9
 800288a:	4638      	mov	r0, r7
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d0e6      	beq.n	8002860 <_printf_common+0xa4>
 8002892:	3601      	adds	r6, #1
 8002894:	e7d9      	b.n	800284a <_printf_common+0x8e>
	...

08002898 <_printf_i>:
 8002898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	460c      	mov	r4, r1
 800289e:	4691      	mov	r9, r2
 80028a0:	7e27      	ldrb	r7, [r4, #24]
 80028a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028a4:	2f78      	cmp	r7, #120	; 0x78
 80028a6:	4680      	mov	r8, r0
 80028a8:	469a      	mov	sl, r3
 80028aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028ae:	d807      	bhi.n	80028c0 <_printf_i+0x28>
 80028b0:	2f62      	cmp	r7, #98	; 0x62
 80028b2:	d80a      	bhi.n	80028ca <_printf_i+0x32>
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	f000 80d8 	beq.w	8002a6a <_printf_i+0x1d2>
 80028ba:	2f58      	cmp	r7, #88	; 0x58
 80028bc:	f000 80a3 	beq.w	8002a06 <_printf_i+0x16e>
 80028c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028c8:	e03a      	b.n	8002940 <_printf_i+0xa8>
 80028ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028ce:	2b15      	cmp	r3, #21
 80028d0:	d8f6      	bhi.n	80028c0 <_printf_i+0x28>
 80028d2:	a001      	add	r0, pc, #4	; (adr r0, 80028d8 <_printf_i+0x40>)
 80028d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80028d8:	08002931 	.word	0x08002931
 80028dc:	08002945 	.word	0x08002945
 80028e0:	080028c1 	.word	0x080028c1
 80028e4:	080028c1 	.word	0x080028c1
 80028e8:	080028c1 	.word	0x080028c1
 80028ec:	080028c1 	.word	0x080028c1
 80028f0:	08002945 	.word	0x08002945
 80028f4:	080028c1 	.word	0x080028c1
 80028f8:	080028c1 	.word	0x080028c1
 80028fc:	080028c1 	.word	0x080028c1
 8002900:	080028c1 	.word	0x080028c1
 8002904:	08002a51 	.word	0x08002a51
 8002908:	08002975 	.word	0x08002975
 800290c:	08002a33 	.word	0x08002a33
 8002910:	080028c1 	.word	0x080028c1
 8002914:	080028c1 	.word	0x080028c1
 8002918:	08002a73 	.word	0x08002a73
 800291c:	080028c1 	.word	0x080028c1
 8002920:	08002975 	.word	0x08002975
 8002924:	080028c1 	.word	0x080028c1
 8002928:	080028c1 	.word	0x080028c1
 800292c:	08002a3b 	.word	0x08002a3b
 8002930:	680b      	ldr	r3, [r1, #0]
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	600a      	str	r2, [r1, #0]
 8002938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800293c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002940:	2301      	movs	r3, #1
 8002942:	e0a3      	b.n	8002a8c <_printf_i+0x1f4>
 8002944:	6825      	ldr	r5, [r4, #0]
 8002946:	6808      	ldr	r0, [r1, #0]
 8002948:	062e      	lsls	r6, r5, #24
 800294a:	f100 0304 	add.w	r3, r0, #4
 800294e:	d50a      	bpl.n	8002966 <_printf_i+0xce>
 8002950:	6805      	ldr	r5, [r0, #0]
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	2d00      	cmp	r5, #0
 8002956:	da03      	bge.n	8002960 <_printf_i+0xc8>
 8002958:	232d      	movs	r3, #45	; 0x2d
 800295a:	426d      	negs	r5, r5
 800295c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002960:	485e      	ldr	r0, [pc, #376]	; (8002adc <_printf_i+0x244>)
 8002962:	230a      	movs	r3, #10
 8002964:	e019      	b.n	800299a <_printf_i+0x102>
 8002966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800296a:	6805      	ldr	r5, [r0, #0]
 800296c:	600b      	str	r3, [r1, #0]
 800296e:	bf18      	it	ne
 8002970:	b22d      	sxthne	r5, r5
 8002972:	e7ef      	b.n	8002954 <_printf_i+0xbc>
 8002974:	680b      	ldr	r3, [r1, #0]
 8002976:	6825      	ldr	r5, [r4, #0]
 8002978:	1d18      	adds	r0, r3, #4
 800297a:	6008      	str	r0, [r1, #0]
 800297c:	0628      	lsls	r0, r5, #24
 800297e:	d501      	bpl.n	8002984 <_printf_i+0xec>
 8002980:	681d      	ldr	r5, [r3, #0]
 8002982:	e002      	b.n	800298a <_printf_i+0xf2>
 8002984:	0669      	lsls	r1, r5, #25
 8002986:	d5fb      	bpl.n	8002980 <_printf_i+0xe8>
 8002988:	881d      	ldrh	r5, [r3, #0]
 800298a:	4854      	ldr	r0, [pc, #336]	; (8002adc <_printf_i+0x244>)
 800298c:	2f6f      	cmp	r7, #111	; 0x6f
 800298e:	bf0c      	ite	eq
 8002990:	2308      	moveq	r3, #8
 8002992:	230a      	movne	r3, #10
 8002994:	2100      	movs	r1, #0
 8002996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800299a:	6866      	ldr	r6, [r4, #4]
 800299c:	60a6      	str	r6, [r4, #8]
 800299e:	2e00      	cmp	r6, #0
 80029a0:	bfa2      	ittt	ge
 80029a2:	6821      	ldrge	r1, [r4, #0]
 80029a4:	f021 0104 	bicge.w	r1, r1, #4
 80029a8:	6021      	strge	r1, [r4, #0]
 80029aa:	b90d      	cbnz	r5, 80029b0 <_printf_i+0x118>
 80029ac:	2e00      	cmp	r6, #0
 80029ae:	d04d      	beq.n	8002a4c <_printf_i+0x1b4>
 80029b0:	4616      	mov	r6, r2
 80029b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80029b6:	fb03 5711 	mls	r7, r3, r1, r5
 80029ba:	5dc7      	ldrb	r7, [r0, r7]
 80029bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029c0:	462f      	mov	r7, r5
 80029c2:	42bb      	cmp	r3, r7
 80029c4:	460d      	mov	r5, r1
 80029c6:	d9f4      	bls.n	80029b2 <_printf_i+0x11a>
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d10b      	bne.n	80029e4 <_printf_i+0x14c>
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	07df      	lsls	r7, r3, #31
 80029d0:	d508      	bpl.n	80029e4 <_printf_i+0x14c>
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	6861      	ldr	r1, [r4, #4]
 80029d6:	4299      	cmp	r1, r3
 80029d8:	bfde      	ittt	le
 80029da:	2330      	movle	r3, #48	; 0x30
 80029dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029e4:	1b92      	subs	r2, r2, r6
 80029e6:	6122      	str	r2, [r4, #16]
 80029e8:	f8cd a000 	str.w	sl, [sp]
 80029ec:	464b      	mov	r3, r9
 80029ee:	aa03      	add	r2, sp, #12
 80029f0:	4621      	mov	r1, r4
 80029f2:	4640      	mov	r0, r8
 80029f4:	f7ff fee2 	bl	80027bc <_printf_common>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d14c      	bne.n	8002a96 <_printf_i+0x1fe>
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	b004      	add	sp, #16
 8002a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a06:	4835      	ldr	r0, [pc, #212]	; (8002adc <_printf_i+0x244>)
 8002a08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	680e      	ldr	r6, [r1, #0]
 8002a10:	061f      	lsls	r7, r3, #24
 8002a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a16:	600e      	str	r6, [r1, #0]
 8002a18:	d514      	bpl.n	8002a44 <_printf_i+0x1ac>
 8002a1a:	07d9      	lsls	r1, r3, #31
 8002a1c:	bf44      	itt	mi
 8002a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8002a22:	6023      	strmi	r3, [r4, #0]
 8002a24:	b91d      	cbnz	r5, 8002a2e <_printf_i+0x196>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	f023 0320 	bic.w	r3, r3, #32
 8002a2c:	6023      	str	r3, [r4, #0]
 8002a2e:	2310      	movs	r3, #16
 8002a30:	e7b0      	b.n	8002994 <_printf_i+0xfc>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	2378      	movs	r3, #120	; 0x78
 8002a3c:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <_printf_i+0x248>)
 8002a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a42:	e7e3      	b.n	8002a0c <_printf_i+0x174>
 8002a44:	065e      	lsls	r6, r3, #25
 8002a46:	bf48      	it	mi
 8002a48:	b2ad      	uxthmi	r5, r5
 8002a4a:	e7e6      	b.n	8002a1a <_printf_i+0x182>
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	e7bb      	b.n	80029c8 <_printf_i+0x130>
 8002a50:	680b      	ldr	r3, [r1, #0]
 8002a52:	6826      	ldr	r6, [r4, #0]
 8002a54:	6960      	ldr	r0, [r4, #20]
 8002a56:	1d1d      	adds	r5, r3, #4
 8002a58:	600d      	str	r5, [r1, #0]
 8002a5a:	0635      	lsls	r5, r6, #24
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	d501      	bpl.n	8002a64 <_printf_i+0x1cc>
 8002a60:	6018      	str	r0, [r3, #0]
 8002a62:	e002      	b.n	8002a6a <_printf_i+0x1d2>
 8002a64:	0671      	lsls	r1, r6, #25
 8002a66:	d5fb      	bpl.n	8002a60 <_printf_i+0x1c8>
 8002a68:	8018      	strh	r0, [r3, #0]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6123      	str	r3, [r4, #16]
 8002a6e:	4616      	mov	r6, r2
 8002a70:	e7ba      	b.n	80029e8 <_printf_i+0x150>
 8002a72:	680b      	ldr	r3, [r1, #0]
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	600a      	str	r2, [r1, #0]
 8002a78:	681e      	ldr	r6, [r3, #0]
 8002a7a:	6862      	ldr	r2, [r4, #4]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f7fd fbde 	bl	8000240 <memchr>
 8002a84:	b108      	cbz	r0, 8002a8a <_printf_i+0x1f2>
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	6060      	str	r0, [r4, #4]
 8002a8a:	6863      	ldr	r3, [r4, #4]
 8002a8c:	6123      	str	r3, [r4, #16]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a94:	e7a8      	b.n	80029e8 <_printf_i+0x150>
 8002a96:	6923      	ldr	r3, [r4, #16]
 8002a98:	4632      	mov	r2, r6
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	4640      	mov	r0, r8
 8002a9e:	47d0      	blx	sl
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	d0ab      	beq.n	80029fc <_printf_i+0x164>
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	079b      	lsls	r3, r3, #30
 8002aa8:	d413      	bmi.n	8002ad2 <_printf_i+0x23a>
 8002aaa:	68e0      	ldr	r0, [r4, #12]
 8002aac:	9b03      	ldr	r3, [sp, #12]
 8002aae:	4298      	cmp	r0, r3
 8002ab0:	bfb8      	it	lt
 8002ab2:	4618      	movlt	r0, r3
 8002ab4:	e7a4      	b.n	8002a00 <_printf_i+0x168>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4632      	mov	r2, r6
 8002aba:	4649      	mov	r1, r9
 8002abc:	4640      	mov	r0, r8
 8002abe:	47d0      	blx	sl
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d09b      	beq.n	80029fc <_printf_i+0x164>
 8002ac4:	3501      	adds	r5, #1
 8002ac6:	68e3      	ldr	r3, [r4, #12]
 8002ac8:	9903      	ldr	r1, [sp, #12]
 8002aca:	1a5b      	subs	r3, r3, r1
 8002acc:	42ab      	cmp	r3, r5
 8002ace:	dcf2      	bgt.n	8002ab6 <_printf_i+0x21e>
 8002ad0:	e7eb      	b.n	8002aaa <_printf_i+0x212>
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	f104 0619 	add.w	r6, r4, #25
 8002ad8:	e7f5      	b.n	8002ac6 <_printf_i+0x22e>
 8002ada:	bf00      	nop
 8002adc:	08002c81 	.word	0x08002c81
 8002ae0:	08002c92 	.word	0x08002c92

08002ae4 <_read_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4d07      	ldr	r5, [pc, #28]	; (8002b04 <_read_r+0x20>)
 8002ae8:	4604      	mov	r4, r0
 8002aea:	4608      	mov	r0, r1
 8002aec:	4611      	mov	r1, r2
 8002aee:	2200      	movs	r2, #0
 8002af0:	602a      	str	r2, [r5, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7fd fec6 	bl	8000884 <_read>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d102      	bne.n	8002b02 <_read_r+0x1e>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	b103      	cbz	r3, 8002b02 <_read_r+0x1e>
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	20000128 	.word	0x20000128

08002b08 <_fstat_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4d07      	ldr	r5, [pc, #28]	; (8002b28 <_fstat_r+0x20>)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	602b      	str	r3, [r5, #0]
 8002b16:	f000 f821 	bl	8002b5c <_fstat>
 8002b1a:	1c43      	adds	r3, r0, #1
 8002b1c:	d102      	bne.n	8002b24 <_fstat_r+0x1c>
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	b103      	cbz	r3, 8002b24 <_fstat_r+0x1c>
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	bd38      	pop	{r3, r4, r5, pc}
 8002b26:	bf00      	nop
 8002b28:	20000128 	.word	0x20000128

08002b2c <_isatty_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4d06      	ldr	r5, [pc, #24]	; (8002b48 <_isatty_r+0x1c>)
 8002b30:	2300      	movs	r3, #0
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f000 f818 	bl	8002b6c <_isatty>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d102      	bne.n	8002b46 <_isatty_r+0x1a>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	b103      	cbz	r3, 8002b46 <_isatty_r+0x1a>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	20000128 	.word	0x20000128

08002b4c <_close>:
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <_close+0xc>)
 8002b4e:	2258      	movs	r2, #88	; 0x58
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f04f 30ff 	mov.w	r0, #4294967295
 8002b56:	4770      	bx	lr
 8002b58:	20000128 	.word	0x20000128

08002b5c <_fstat>:
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <_fstat+0xc>)
 8002b5e:	2258      	movs	r2, #88	; 0x58
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f04f 30ff 	mov.w	r0, #4294967295
 8002b66:	4770      	bx	lr
 8002b68:	20000128 	.word	0x20000128

08002b6c <_isatty>:
 8002b6c:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <_isatty+0xc>)
 8002b6e:	2258      	movs	r2, #88	; 0x58
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	2000      	movs	r0, #0
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000128 	.word	0x20000128

08002b7c <_lseek>:
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <_lseek+0xc>)
 8002b7e:	2258      	movs	r2, #88	; 0x58
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	4770      	bx	lr
 8002b88:	20000128 	.word	0x20000128

08002b8c <_sbrk>:
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <_sbrk+0x14>)
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	4602      	mov	r2, r0
 8002b92:	b909      	cbnz	r1, 8002b98 <_sbrk+0xc>
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <_sbrk+0x18>)
 8002b96:	6019      	str	r1, [r3, #0]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	4402      	add	r2, r0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	4770      	bx	lr
 8002ba0:	20000094 	.word	0x20000094
 8002ba4:	20000130 	.word	0x20000130

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
